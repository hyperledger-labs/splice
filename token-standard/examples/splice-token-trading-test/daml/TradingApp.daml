-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | OTC Trading venue example templates.
module TradingApp where

import Splice.Api.Token.MetadataV1 as Api.Token.MetadataV1
import Splice.Api.Token.AllocationV1 as Api.Token.AllocationV1
import Splice.Api.Token.AllocationRequestV1
import DA.Optional (fromOptional)
import DA.Set as Set

template TradingAgreement with
    venue : Party
    user : Party
  where
    signatory venue, user

    nonconsuming choice TradingAgreement_ProposeTrade : ContractId OTCTradeProposal
      with
        transferLegs : [Api.Token.AllocationV1.TransferLeg]
      controller user
      do
        create OTCTradeProposal with
          venue
          tradeCid = None
          transferLegs
          approvers = Set.singleton user

template OTCTradeProposal with
    venue : Party
    tradeCid : Optional (ContractId OTCTradeProposal) -- Tracking-id for the trade being proposed. Set to None for new trades.
    transferLegs : [Api.Token.AllocationV1.TransferLeg]
    approvers : Set.Set Party -- ^ Parties that have approved the proposal
  where
    signatory venue, approvers
    observer tradingParties transferLegs

    -- This is test code, so we don't care about the contention here.
    -- Moreover, likely the number of trading parties is going to be low anyways.
    choice OTCTradeProposal_Accept : ContractId OTCTradeProposal
      with
        approver : Party
      controller approver
      do
        let newApprovers = Set.insert approver approvers
        let traders = tradingParties transferLegs
        require "Approver is a trading party" (approver `Set.member` traders)
        require "Approver is new" (not $ approver `Set.member` approvers)
        create this with
          approvers = newApprovers
          tradeCid = Some (fromOptional self tradeCid)

    choice OTCTradeProposal_Reject : ()
      with
        trader : Party
      controller trader
      do require "Trader is a trading party" (trader `Set.member` tradingParties transferLegs)

    choice OTCTradeProposal_InitiateSettlement : ContractId OTCTrade
      with
        prepareUntil : Time
        settleBefore : Time
      controller venue
      do
        require "All trading parties have approved" (approvers == tradingParties transferLegs)
        now <- getTime
        require "Preparation time has not passed" (now < prepareUntil)
        require "Preparation time before settlement time" (prepareUntil < settleBefore)
        create OTCTrade with
          venue
          transferLegs
          tradeCid = fromOptional self tradeCid
          createdAt = now
          prepareUntil
          settleBefore

tradeAllocations : SettlementInfo -> [Api.Token.AllocationV1.TransferLeg] -> [AllocationView]
tradeAllocations settlementInfo transferLegs = do
  (i, transferLeg) <- zip [0..length transferLegs] transferLegs
  pure AllocationView with
    settlement = settlementInfo
    transferLegId = i
    transferLeg

template OTCTrade
  with
    venue : Party
    transferLegs : [Api.Token.AllocationV1.TransferLeg]
    tradeCid : ContractId OTCTradeProposal
    createdAt : Time
    prepareUntil : Time
    settleBefore : Time
  where
    signatory venue, tradingParties transferLegs

    choice OTCTrade_Settle : [ChoiceExecutionMetadata]
      with
        allocationInstructions : [ContractId Allocation]
        extraArgss : [ExtraArgs]
      controller venue
      do
        -- check timing constraints
        now <- getTime
        require "Preparation time has passed" (now >= prepareUntil) -- TODO (#17541):consider early settlement
        require "Settlement deadline has not passed" (now < settleBefore)
        -- validate and execute transferLegs
        require "There is one context per transfer" (length extraArgss == length transferLegs)
        require "There is one allocation instruction per transfer" (length allocationInstructions == length transferLegs)
        let settlementInfo = SettlementInfo with
              executor = venue
              requestedAt = createdAt
              settlementRef = makeTradeRef tradeCid
              allocateBefore = prepareUntil
              settleBefore
        let expectedAllocations = tradeAllocations settlementInfo transferLegs
        forA (zip3 allocationInstructions extraArgss expectedAllocations) \(instrCid, extraArgs, expectedAlloc) -> do
          -- fetch and validate the allocation instruction
          instr <- fetch @Allocation instrCid
          let instrView = view @Allocation instr
          require "Allocation matches expected allocation" (instrView == expectedAlloc)
          exercise instrCid (Allocation_ExecuteTransfer extraArgs)

    interface instance AllocationRequest for OTCTrade where
      view = AllocationRequestView with
        settlement = SettlementInfo with
          executor = venue
          requestedAt = createdAt
          settlementRef = makeTradeRef tradeCid
          allocateBefore = prepareUntil
          settleBefore
        transferLegs
        meta = emptyMetadata

      allocationRequest_RejectImpl _self AllocationRequest_Reject{..} = do
        -- Note: this corresponds to signalling early that one is going to fail to deliver one's assets.
        -- A real trading app will likely demand punitive charges for this.
        require "Actor is a sender" (any (actor ==) (map (.sender) transferLegs))
        pure ChoiceExecutionMetadata with meta = emptyMetadata

      allocationRequest_WithdrawImpl _self _extraArgs =
        -- just archiving the trade is enough
        pure ChoiceExecutionMetadata with meta = emptyMetadata


tradingParties : [Api.Token.AllocationV1.TransferLeg] -> Set.Set Party
tradingParties = foldl (\acc t -> Set.insert t.sender (Set.insert t.receiver acc)) Set.empty

-- | Check whether a required condition is true. If it's not, abort the
-- transaction with a message saying that the requirement was not met.
require : CanAssert m => Text -> Bool -> m ()
require msg invariant =
  assertMsg ("The requirement '" <> msg <> "' was not met.") invariant

makeTradeRef : ContractId OTCTradeProposal -> Api.Token.AllocationV1.Reference
makeTradeRef tradeCid = Api.Token.AllocationV1.Reference with
  id = "OTCTradeProposal" -- set to the name of the template to simplify debugging
  cid = Some (coerceContractId tradeCid)
