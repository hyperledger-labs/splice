-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Util.Disclosure where

import Splice.Api.Token.MetadataV1 as Api.Token.MetadataV1
import DA.Map qualified as Map
import Daml.Script

-- | A set of disclosures. Used to work around the fact that duplicate disclosures for the
-- same contract are not allowed.
data Disclosures' = Disclosures' with
    disclosures : Map.Map Api.Token.MetadataV1.AnyContractId Disclosure

instance Monoid Disclosures' where
  mempty = Disclosures' with disclosures = Map.empty

instance Semigroup Disclosures' where
  (Disclosures' ds1) <> (Disclosures' ds2) =
    Disclosures' with disclosures = Map.union ds1 ds2

queryDisclosure' : forall t. Template t => Party -> ContractId t -> Script Disclosures'
queryDisclosure' p cid = do
  optDisc <- queryDisclosure @t p cid
  case optDisc of
    None -> fail $ "Disclosure not found for: " <> show cid
    Some d -> pure Disclosures' with disclosures = Map.fromList [(coerceContractId cid, d)]

submitWithDisclosures' : Party -> Disclosures' -> Commands a -> Script a
submitWithDisclosures' p (Disclosures' ds) cmds = submitWithDisclosures p (Map.values ds) cmds

submitWithDisclosuresMustFail' : Party -> Disclosures' -> Commands a -> Script ()
submitWithDisclosuresMustFail' p (Disclosures' ds) cmds = submitWithDisclosuresMustFail p (Map.values ds) cmds
