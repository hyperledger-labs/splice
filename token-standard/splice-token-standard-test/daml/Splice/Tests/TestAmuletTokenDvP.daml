-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | Daml script tests showing that the token standard can be used to execute
-- DvP settlements of Amulet tokens; and how to do so.
--
-- See this test and the 'Splice.Testing.TradingApp' module for an example of
-- how to integrate with the allocation APIs of the token standard to execute
-- DvP settlements.
--
-- Note also that the delivery part of a DvP settelement can be both another
-- token implementing the standard, as well as the creation of on-ledger state
-- specific to your registry; e.g., a license contract.
module Splice.Tests.TestAmuletTokenDvP where

import Daml.Script

import DA.Action (unless)
import DA.Assert
import DA.Foldable (forA_, foldMap)
import DA.List (sortOn)
import DA.Optional (isSome)
import qualified DA.TextMap as TextMap
import DA.Time

import Splice.Api.Token.MetadataV1 as Api.Token.MetadataV1
import Splice.Api.Token.HoldingV1
import Splice.Api.Token.AllocationV1 as Api.Token.AllocationV1
import Splice.Api.Token.AllocationRequestV1
import Splice.Api.Token.AllocationInstructionV1

import Splice.Amulet (AppRewardCoupon(..))
import Splice.Amulet.TokenApiUtils (burnedMetaKey)

import Splice.Testing.Apps.TradingApp hiding (require)
import Splice.Testing.Utils
import Splice.Testing.Registries.AmuletRegistry qualified as AmuletRegistry
import Splice.Testing.TokenStandard.RegistryApi qualified as RegistryApi
import Splice.Testing.TokenStandard.WalletClient qualified as WalletClient


-- | Test that a DvP settlement of an OTC trade works when using Amulet via the token standard.
testDvP : Script ()
testDvP = script do
  registry <- AmuletRegistry.initialize AmuletRegistry.defaultAmuletRegistryConfig

  alice <- allocatePartyExact "alice"
  bob <- allocatePartyExact "bob"

  -- featured app provider
  provider <- allocatePartyExact "trading-app-provider-party"
  providerBeneficiary1 <- allocatePartyExact "trading-app-investor1"
  providerBeneficiary2 <- allocatePartyExact "trading-app-investor2"
  let providerBeneficiaries =
        [ (provider, 0.8)
        , (providerBeneficiary1, 0.1)
        , (providerBeneficiary2, 0.1)
        ]
  AmuletRegistry.featureApp registry provider

  -- get some funds for alice and bob
  AmuletRegistry.tapLockedAndUnlockedFunds registry alice 1000.0
  AmuletRegistry.tapLockedAndUnlockedFunds registry bob 1000.0

  let amuletId = registry.instrumentId
  let mkTransfer sender receiver amount = Api.Token.AllocationV1.TransferLeg with
        sender
        receiver
        amount
        instrumentId = amuletId
        meta = emptyMetadata
  -- Note: here we use Amulet as the single asset, as that is all we have available in this repository.
  -- Given that we are using only the DvP interface, that should though be a fine stand-in for
  -- a DvP across two assets from different registries.
  let aliceLeg = mkTransfer alice bob 100.0
  let bobLeg = mkTransfer bob alice 20.0

  -- alice proposes trade with bob
  proposalCid <- submit alice $ createCmd OTCTradeProposal with
    venue = provider
    tradeCid = None
    transferLegs = [aliceLeg, bobLeg]
    approvers = [alice]

  -- bob accepts
  proposalCid <- submit bob $ exerciseCmd proposalCid OTCTradeProposal_Accept with
    approver = bob

  -- provider initiates settlement
  now <- getTime
  let settleBefore = now `addRelTime` hours 2
  otcTradeCid <- submit provider $
    exerciseCmd proposalCid OTCTradeProposal_InitiateSettlement with
      prepareUntil = now `addRelTime` hours 1
      settleBefore

  -- check that the allocation request is present
  Some otcTrade <- queryContractId provider otcTradeCid

  -- Alice sees the allocation request in her wallet
  [aliceAlloc] <- WalletClient.listRequestedAllocations alice amuletId
  aliceAlloc.transferLeg.amount === 100.0

  -- alice accepts allocation request directly via her wallet
  inputHoldingCids <- WalletClient.listHoldingCids alice amuletId
  holdings <- WalletClient.listHoldings alice amuletId
  debug holdings

  -- test that using the wrong admin party fails
  enrichedChoice <- RegistryApi.getAllocationFactory registry AllocationFactory_Allocate with
    expectedAdmin = alice
    allocation = aliceAlloc
    inputHoldingCids
    requestedAt = now
    extraArgs = emptyExtraArgs
  submitWithDisclosuresMustFail' alice enrichedChoice.disclosures $
    exerciseCmd enrichedChoice.factoryCid enrichedChoice.arg

  -- alice accepts allocation request directly via her wallet
  -- TODO(#18633): test here and for all steps that the expected ledger time bounds are present on the submissions
  debug inputHoldingCids
  enrichedChoice <- RegistryApi.getAllocationFactory registry AllocationFactory_Allocate with
    expectedAdmin = registry.dso
    allocation = aliceAlloc
    inputHoldingCids
    requestedAt = now
    extraArgs = emptyExtraArgs
  result <- submitWithDisclosures' alice enrichedChoice.disclosures $
    exerciseCmd enrichedChoice.factoryCid enrichedChoice.arg

  -- check metadata
  expectBurn result.meta

  -- check lock context
  [(_, lockedHolding)] <- WalletClient.listLockedHoldings alice registry.instrumentId
  let expectedLock = Some $ Lock with
        expiresAt = Some settleBefore
        expiresAfter = None
        holders = [registry.dso]
        context = Some "allocation for transfer leg 0 to 'bob'"
  lockedHolding.lock === expectedLock

  -- Bob sees the allocation request in his wallet as well
  [bobAlloc] <- WalletClient.listRequestedAllocations bob amuletId
  bobAlloc.transferLeg.amount === 20.0

  -- bob accepts allocation request directly via her wallet
  inputHoldingCids <- WalletClient.listHoldingCids bob amuletId
  enrichedChoice <- RegistryApi.getAllocationFactory registry AllocationFactory_Allocate with
    expectedAdmin = registry.dso
    allocation = bobAlloc
    inputHoldingCids
    requestedAt = now
    extraArgs = emptyExtraArgs
  submitWithDisclosures' bob enrichedChoice.disclosures $
    exerciseCmd enrichedChoice.factoryCid enrichedChoice.arg

  factoryView <- submitWithDisclosures' alice enrichedChoice.disclosures $ exerciseCmd enrichedChoice.factoryCid AllocationFactory_PublicFetch
    with
      expectedAdmin = registry.dso
      actor = alice
  factoryView === Splice.Api.Token.AllocationInstructionV1.AllocationFactoryView registry.dso emptyMetadata

  -- assume the time given to prepare has passed
  passTime (hours 1)

  -- provider runs automation that completes the settlement
  let otcTradeRef = (view $ toInterface @AllocationRequest otcTrade).settlement.settlementRef
  allocations <- appBackendListAllocations provider otcTradeRef
  length allocations === 2

  let beneficiaryMetadata = AmuletRegistry.beneficiariesToMetadata providerBeneficiaries
  contexts <- forA allocations $ \(allocCid, _) ->
     RegistryApi.getAllocationTransferContext registry allocCid beneficiaryMetadata
  let disclosures = foldMap (.disclosures) contexts
  let extraArgss = do
        context <- contexts
        pure ExtraArgs with
          context = context.choiceContext
          meta = beneficiaryMetadata
  results <- submitWithDisclosures' provider disclosures $ exerciseCmd otcTradeCid OTCTrade_Settle with
    allocationInstructions = map fst allocations
    extraArgss

  -- check metadata
  forA_ results $ \result -> expectBurn result.meta

  -- check that the expected transfers happened
  WalletClient.checkHoldingWithAmountExists alice amuletId 20.0
  WalletClient.checkHoldingWithAmountExists bob amuletId 100.0

  WalletClient.checkBalanceApprox alice amuletId 919.0 -- around 1 $ of fees paid
  WalletClient.checkBalanceApprox bob amuletId 1079.8  -- around 0.2 $ of fees paid

  -- check that the provider got their featured app reward coupons
  coupons <- map snd <$> query @AppRewardCoupon provider
  let couponWithAmount : Decimal -> AppRewardCoupon -> Bool
      couponWithAmount amount coupon =
        coupon.featured && coupon.beneficiary == Some provider && coupon.amount == amount
      checkCouponExists amount =
        unless (any (couponWithAmount amount) coupons) $
          fail $ "Expected coupon with amount " <> show amount <> " not found: " <> show coupons

      extraAppReward = 2.0 -- 1 $ (at 0.5 Amulet per $)
      providerWeight = 0.8
      aliceAmount = providerWeight * (extraAppReward + 1.06) -- 1% fees plus the 0.06 Amulet create fee  (at 0.5 Amulet per $)
      bobAmount = providerWeight * (extraAppReward + 0.26) -- 0.5% fees (at 0.5 Amulet per $)

      checkNumCouponsFor b expectedNumCoupons = do
        let numCoupons = length $ filter (\c -> c.beneficiary == Some b) coupons
        unless (numCoupons == expectedNumCoupons ) $
          fail $ "Expected " <> show expectedNumCoupons <> " coupons for " <> show b <> ", but got " <> show numCoupons


  checkCouponExists aliceAmount
  checkCouponExists bobAmount

  checkNumCouponsFor providerBeneficiary1 2
  checkNumCouponsFor providerBeneficiary2 2

  -- TODO (#17541):early abortion of settlement, unwinding of expired settlements, etc.
  pure ()


-- utilities
------------

-- | List all allocations matching a particular settlement reference, sorted by their tradeLeg id.
-- This function would be run on the trading app provider's backend as part of an automation loop.
appBackendListAllocations : Party -> Reference -> Script [(ContractId Allocation, AllocationView)]
appBackendListAllocations p ref = do
  allocs <- queryInterface @Allocation p
  let matchingAllocs = do
        (cid, Some fundedAllocation) <- allocs
        guard (fundedAllocation.allocation.settlement.settlementRef == ref)
        pure (cid, fundedAllocation)
  pure $ sortOn (\(_, fundedAllocation) -> fundedAllocation.allocation.transferLegId) matchingAllocs

expectBurn : Metadata -> Script ()
expectBurn meta =
  unless (isSome $ TextMap.lookup burnedMetaKey meta.values) $
    fail $ "Expected burned meta key to be present in " <> show meta
