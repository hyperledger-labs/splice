-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | An example of how to build an OTC trading app for multi-leg standard token trades.
--
-- Used as part of the testing infrastructure to test the DvP workflows based on the token standard.
module Splice.Testing.Apps.TradingApp where

import Splice.Api.Token.MetadataV1 as Api.Token.MetadataV1
import Splice.Api.Token.AllocationV1 as Api.Token.AllocationV1
import Splice.Api.Token.AllocationRequestV1
import DA.List ((!!))
import DA.Optional (fromOptional)
import DA.Set as Set


template OTCTradeProposal with
    venue : Party
    tradeCid : Optional (ContractId OTCTradeProposal) -- Tracking-id for the trade being proposed. Set to None for new trades.
    transferLegs : [Api.Token.AllocationV1.TransferLeg]
    approvers : [Party] -- ^ Parties that have approved the proposal
  where
    signatory approvers
    observer venue, tradingParties transferLegs

    -- This is test code, so we don't care about the contention here.
    -- Moreover, likely the number of trading parties is going to be low anyways.
    choice OTCTradeProposal_Accept : ContractId OTCTradeProposal
      with
        approver : Party
      controller approver
      do
        let newApprovers = approver :: approvers
        let traders = tradingParties transferLegs
        require "Approver is a trading party" (approver `Set.member` traders)
        require "Approver is new" (approver `notElem` approvers)
        create this with
          approvers = newApprovers
          tradeCid = Some (fromOptional self tradeCid)

    choice OTCTradeProposal_Reject : ()
      with
        trader : Party
      controller trader
      do require "Trader is a trading party" (trader `Set.member` tradingParties transferLegs)

    choice OTCTradeProposal_InitiateSettlement : ContractId OTCTrade
      with
        prepareUntil : Time
        settleBefore : Time
      controller venue
      do
        require "All trading parties have approved" (Set.fromList approvers == tradingParties transferLegs)
        now <- getTime
        require "Preparation time has not passed" (now < prepareUntil)
        require "Preparation time before settlement time" (prepareUntil < settleBefore)
        create OTCTrade with
          venue
          transferLegs
          tradeCid = fromOptional self tradeCid
          createdAt = now
          prepareUntil
          settleBefore

tradeAllocations : SettlementInfo -> [Api.Token.AllocationV1.TransferLeg] -> [AllocationSpecification]
tradeAllocations settlementInfo transferLegs = do
  (i, transferLeg) <- zip [0..length transferLegs] transferLegs
  pure AllocationSpecification with
    settlement = settlementInfo
    transferLegId = i
    transferLeg

template OTCTrade
  with
    venue : Party
    transferLegs : [Api.Token.AllocationV1.TransferLeg]
    tradeCid : ContractId OTCTradeProposal
    createdAt : Time
    prepareUntil : Time
    settleBefore : Time
  where
    signatory venue, tradingParties transferLegs

    choice OTCTrade_Settle : [Allocation_ExecuteTransferResult]
      with
        allocations : [ContractId Allocation]
        extraArgss : [ExtraArgs]
      controller venue
      do
        -- check timing constraints
        now <- getTime
        require "Settlement deadline has not passed" (now < settleBefore)
        -- validate and execute transferLegs
        require "There is one context per transfer" (length extraArgss == length transferLegs)
        require "There is one allocation per transfer" (length allocations == length transferLegs)
        let settlementInfo = SettlementInfo with
              executor = venue
              requestedAt = createdAt
              settlementRef = makeTradeRef tradeCid
              allocateBefore = prepareUntil
              settleBefore
              meta = emptyMetadata
        let expectedAllocations = tradeAllocations settlementInfo transferLegs
        forA (zip3 allocations extraArgss expectedAllocations) \(instrCid, extraArgs, expectedAlloc) -> do
          -- fetch and validate the allocation instruction
          instr <- fetch @Allocation instrCid
          let instrView = view @Allocation instr
          require "Allocation matches expected allocation" (instrView.allocation == expectedAlloc)
          exercise instrCid (Allocation_ExecuteTransfer extraArgs)

    choice OTCTrade_Cancel : [Allocation_CancelResult]
      with
        allocations : [ContractId Allocation]
        extraArgss : [ExtraArgs]
      controller venue
      do -- validate and cancel transferLegs
         require "There is one context per transfer" (length extraArgss == length transferLegs)
         require "There are not more allocations than transfer legs" (length allocations <= length transferLegs)
         let settlementInfo = SettlementInfo with
               executor = venue
               requestedAt = createdAt
               settlementRef = makeTradeRef tradeCid
               allocateBefore = prepareUntil
               settleBefore
               meta = emptyMetadata
         let expectedAllocations = tradeAllocations settlementInfo transferLegs
         forA (zip allocations extraArgss) \(instrCid, extraArgs) -> do
           -- fetch and validate the allocation instruction
           instr <- fetch @Allocation instrCid
           let instrView = view @Allocation instr
           require "transferLegId is valid" (0 <= instrView.allocation.transferLegId && instrView.allocation.transferLegId < length expectedAllocations)
           -- No need to check for duplicate transferLegIds explicitly, we just let the consuming cancel choice fail.
           let expectedAlloc = expectedAllocations !! instrView.allocation.transferLegId
           require "Allocation matches expected allocation" (instrView.allocation == expectedAlloc)
           exercise instrCid (Allocation_Cancel extraArgs)


    interface instance AllocationRequest for OTCTrade where
      view = AllocationRequestView with
        settlement = SettlementInfo with
          executor = venue
          requestedAt = createdAt
          settlementRef = makeTradeRef tradeCid
          allocateBefore = prepareUntil
          settleBefore
          meta = emptyMetadata
        transferLegs
        meta = emptyMetadata

      allocationRequest_RejectImpl _self AllocationRequest_Reject{..} = do
        -- Note: this corresponds to signalling early that one is going to fail to deliver one's assets.
        -- A real trading app will likely demand punitive charges for this.
        require "Actor is a sender" (any (\leg -> actor == leg.sender) transferLegs)
        pure ChoiceExecutionMetadata with meta = emptyMetadata

      allocationRequest_WithdrawImpl _self _extraArgs =
        -- just archiving the trade is enough
        pure ChoiceExecutionMetadata with meta = emptyMetadata


tradingParties : [Api.Token.AllocationV1.TransferLeg] -> Set.Set Party
tradingParties = foldl (\acc t -> Set.insert t.sender (Set.insert t.receiver acc)) Set.empty

-- | Check whether a required condition is true. If it's not, abort the
-- transaction with a message saying that the requirement was not met.
require : CanAssert m => Text -> Bool -> m ()
require msg invariant =
  assertMsg ("The requirement '" <> msg <> "' was not met.") invariant

makeTradeRef : ContractId OTCTradeProposal -> Api.Token.AllocationV1.Reference
makeTradeRef tradeCid = Api.Token.AllocationV1.Reference with
  id = "OTCTradeProposal" -- set to the name of the template to simplify debugging
  cid = Some (coerceContractId tradeCid)
