-- | A proxy to feature
module Splice.TokenApiProxy where

-- TODO: move into its own package

import DA.Assert
import DA.Foldable (forA_)

import Splice.Api.Token.TransferInstructionV1
import Splice.Api.FeaturedAppRightV1

template TokenStandardProxy with
    provider : Party -- ^ The app provider whose featured app right should be triggered
    providerWeight : Decimal -- ^ Reward weight for the provider
    userWeight : Decimal -- ^ Reward weight for the user, set to 0.0 if the user should not receive a reward
    extraBeneficiaries : [AppRewardBeneficiary] -- ^ Extra beneficiaries to list
    optAllowList : Optional [Party] -- ^ An optional allow list of parties that can use the proxy
  where
    ensure validProxy this
    signatory provider

    nonconsuming choice TokenStandardProxy_TransferFactory_Transfer
      : ProxyResult TransferInstructionResult
      with
        proxyArg : ProxyArg TransferFactory_Transfer
      -- NOTE: we have to repeat the choice controller here, as Daml does not support computing them generically
      controller proxyArg.choiceArg.transfer.sender
      do
        let ProxyArg{..} = proxyArg
        let user = choiceArg.transfer.sender
        forA_ optAllowList $ \allowList ->
          assertMsg "User is in the allow list" (user `elem` allowList)
        appRight <- fetch featuredAppRightCid
        (view appRight).provider === provider
        markerResult <- exercise featuredAppRightCid FeaturedAppRight_CreateActivityMarker with
          beneficiaries = proxyBeneficiaries this user
        choiceResult <- exercise cid choiceArg
        pure ProxyResult with markerResult; choiceResult

data ProxyArg arg = ProxyArg with
    featuredAppRightCid : ContractId FeaturedAppRight
    cid : ContractId TransferFactory
    choiceArg : arg
  deriving (Show, Eq)


data ProxyResult r = ProxyResult with
    markerResult : FeaturedAppRight_CreateActivityMarkerResult
    choiceResult : r

proxyBeneficiaries : TokenStandardProxy -> Party -> [AppRewardBeneficiary]
proxyBeneficiaries TokenStandardProxy{..} user =
  filter (\b -> b.weight > 0.0) [AppRewardBeneficiary provider providerWeight, AppRewardBeneficiary user userWeight]
    ++ extraBeneficiaries

validProxy : TokenStandardProxy -> Bool
validProxy TokenStandardProxy{..} =
    validWeight userWeight &&
    validWeight providerWeight  &&
    all (\b -> validWeight b.weight) extraBeneficiaries
  where
    validWeight : Decimal -> Bool
    validWeight w = 0.0 <= w && w <= 1.0
