# Copyright (c) 2025 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

openapi: 3.0.0
info:
  title: allocation instruction off-ledger API
  description: |
    Implemented by token registries for using and managing
    allocation instructions by wallets.
  version: 1.0.0
paths:

  /registry/allocation-instruction/allocation-factory:
    post:
      operationId: "getAllocationFactory"
      description: |
        Get the factory and choice context for creating allocations using the `AllocationFactory_Allocate` choice.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetFactoryRequest"
      responses:
        "200":
          description: ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FactoryWithChoiceContext"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"

components:
  responses:
    "400":
      description: "bad request"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    "404":
      description: "not found"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  schemas:
    # TODO(#83): share with the other usages of factory requests, contexts, and disclosed contracts in the other standards.
    GetFactoryRequest:
      type: object
      properties:
        choice_arguments:
          type: object
          description: |
            The arguments that are intended to be passed to the choice provided by the factory.
            To avoid repeating the Daml type definitions, they are specified as JSON objects.
            However the concrete format is given by how the choice arguments are encoded using the Daml JSON API
            (with the `extraArgs.context` and `extraArgs.meta` fields set to the empty object).

            The choice arguments are provided so that the registry can also provide choice-argument
            specific contracts, e.g., the configuration for a specific instrument-id.

            The registry MAY react to such a request by creating extra contracts required to enable the exercising
            of the choice. In that case the `valid_until` field of the returned choice context should be set
            to the time until which these contracts expire.
        exclude_debug_fields:
          description: "If set to true, the response will not include debug fields."
          default: false
          type: boolean
      required:
        [
          "choice_arguments",
        ]

    FactoryWithChoiceContext:
      description: |
        A factory contract together with the choice context required to exercise the choice
        provided by the factory. Typically used to implement the generic initiation of on-ledger workflows
        via a Daml interface.

        Clients SHOULD avoid reusing the same `FactoryWithChoiceContext` for exercising multiple choices,
        as the choice context MAY be specific to the choice being exercised.
      type: object
      properties:
        factory_id:
          description: "The contract ID of the contract implementing the factory interface."
          type: string
        choice_context:
          $ref: "#/components/schemas/ChoiceContext"
        valid_until:
          description: |
            The time until which the choice context can be expected to be valid, and can thus be used to exercise the
            choice. However concurrent activity can invalidate the choice context earlier;
            Thus the in case of a failure to exercise the choice, the client SHOULD also request a new choice context
            as part of retrying the operation.
          type: string
          format: date-time
      required:
        [
          "factory_id",
          "choice_context",
          "valid_until",
        ]

    ChoiceContext:
      description: |
        The context required to exercise a choice on a contract via an interface.
        Used to retrieve additional reference date that is passed in via disclosed contracts,
        which are in turn referred to via their contract ID in the `choice_context_data`.
      type: object
      properties:
        choice_context_data:
          description: "The additional data to use when exercising the choice."
          type: object
        disclosed_contracts:
          description: |
            The contracts that are required to be disclosed to the participant node for exercising
            the choice.
          type: array
          items:
            $ref: "#/components/schemas/DisclosedContract"
      required:
        [
          "transfer_execution_choice_context",
          "disclosed_contracts",
        ]

    # TODO(#83): share with the other usages of disclosed contracts in the other standards.
    DisclosedContract:
      type: object
      properties:
        template_id:
          type: string
        contract_id:
          type: string
        created_event_blob:
          type: string
        synchronizer_id:
          description: |
            The synchronizer to which the contract is currently assigned.
            If the contract is in the process of being reassigned, then a "409" response is returned.
          type: string
        debug_package_name:
          description: |
            The name of the Daml package that was used to create the contract.
            Use this data only if you trust the provider, as it might not match the data in the
            `created_event_blob`.
          type: string
        debug_payload:
          description: |
            The contract arguments that were used to create the contract.
            Use this data only if you trust the provider, as it might not match the data in the
            `created_event_blob`.
          type: object
        debug_created_at:
          description: |
            The ledger effective time at which the contract was created.
            Use this data only if you trust the provider, as it might not match the data in the
            `created_event_blob`.
          type: string
          format: date-time
      required:
        [
          "template_id",
          "contract_id",
          "created_event_blob",
          "synchronizer_id"
        ]

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: string
