-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.Api.Token.BurnMintV1 where

import Splice.Api.Token.MetadataV1
import Splice.Api.Token.HoldingV1

-- | A factory for generic burn/mint operations.
interface BurnMintFactory where
  viewtype BurnMintFactoryView

  burnMintFactory_burnMintImpl : ContractId BurnMintFactory -> BurnMintFactory_BurnMint -> Update BurnMintFactory_BurnMintResult
  burnMintFactory_publicFetchImpl : ContractId BurnMintFactory -> BurnMintFactory_PublicFetch -> Update BurnMintFactoryView

  nonconsuming choice BurnMintFactory_BurnMint : BurnMintFactory_BurnMintResult
    -- ^ Burn the holdings in inputHoldingCids and create holdings with the owners and amounts specified in
    -- outputs.
    --
    -- Note that this is jointly authorized by the admin, all owners of the burnt inputs and all holders of the burnt outputs so it does
    -- not grant anyone unilateral mint or burn rights. If that is desired, implementation specific delegation contracts can be used.
    --
    -- Implementations are free to restrict the implementation of this choice including failing on all inputs or not
    -- implement this interface at all.
    with
      expectedAdmin : Party
       -- ^ The expected admin party issuing the factory. Implementations MUST validate that this matches
        -- the admin of the factory.
        -- Callers should ensure they get `expectedAdmin` from a trusted source, e.g., a read against
        -- their own participant. That way they can ensure that it is safe to exercise a choice
        -- on a factory contract acquired from an untrusted source *provided*
        -- all vetted Daml packages only contain interface implementations
        -- that check the expected admin party.
      sender : Party
        -- ^ The sender that owns the holdings in `inputHoldingCids`.
        -- All holdings in `inputHoldingCids` must be owned by this party.
      instrumentId : InstrumentId
        -- ^ The instrument id of the holdings.
        -- All holdings in `inputHoldingCids` as well as the resulting output holdings MUST
        -- have this instrument id.
      inputHoldingCids : [ContractId Holding]
        -- ^ The holdings that should be burnt.
        -- All holdings in `inputHoldingCids` MUST be archived by this choice.
      outputs : [BurnMintOutput]
        -- ^ The holdings that should be created. The choice MUST create new holdings with the given amounts.
      extraActors : [Party]
        -- ^ Extra actors, the full actors required are the admin + extraActors. This is often the sender and the receivers
        -- but we allow different sets of actors to support token implementations with different authorization setups.
      extraArgs : ExtraArgs
        -- ^ Additional context. Implementations SHOULD include a `splice.lfdecentralizedtrust.org/reason` key in the metadata
        -- to provide a human readable description that can be used by wallets.
    controller (view this).admin :: extraActors
    do burnMintFactory_burnMintImpl this self arg

  nonconsuming choice BurnMintFactory_PublicFetch : BurnMintFactoryView
    with
      expectedAdmin : Party
        -- ^ The expected admin party issuing the factory. Implementations MUST validate that this matches
        -- the admin of the factory.
        -- Callers should ensure they get `expectedAdmin` from a trusted source, e.g., a read against
        -- their own participant. That way they can ensure that it is safe to exercise a choice
        -- on a factory contract acquired from an untrusted source *provided*
        -- all vetted Daml packages only contain interface implementations
        -- that check the expected admin party.
      actor : Party
    controller actor
    do burnMintFactory_publicFetchImpl this self arg

data BurnMintOutput = BurnMintOutput
  with
    owner : Party
    amount : Decimal
    context : ChoiceContext
      -- ^ Context specific to this output which can be used to support locking or other implementation specific features.
  deriving (Show, Eq)

data BurnMintFactory_BurnMintResult = BurnMintFactory_BurnMintResult
  with
    outputCids : [ContractId Holding]
      -- ^ The holdings created by the choice. Must contain exactly the outputs specified in the choice argument in the same order.
  deriving (Show, Eq)

data BurnMintFactoryView = BurnMintFactoryView
   with
     admin : Party
       -- ^ The party representing the registry app that administers the instruments
       -- for which this burnt mint factory can be used.
     meta : Metadata
       -- ^ Additional metadata specific to the burn mint factory, used for extensibility.
   deriving (Show, Eq)
