#! /usr/bin/env bash

set -euo pipefail

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source "${script_dir}/lib/libcli.source"

image="$(<target/image-tag)"

# Compute a unique index per image name, to be used for tmp directories and port numbers,
# as otherwise blackduck is unhappy with parallelism
# shellcheck disable=SC2012,SC2010
index=$(ls .. | grep -nx "$(basename "$(pwd)")" | sed 's/:.*//')

BASE_PORT=9000
TMP_DIR="/tmp/blackduck-docker-scan/${index}"
mkdir -p "${TMP_DIR}"
export DETECT_JAR_DOWNLOAD_DIR="${TMP_DIR}/detect_jars"

function get_top_base_layer() {
  base_image=$(cat<<EOF | python -
from dockerfile_parse import DockerfileParser
dfp = DockerfileParser(path = "Dockerfile")
dfp.build_args = {"base_version": "$(get-snapshot-version)", "cometbft_sha": "${COMETBFT_IMAGE_SHA256}", "cometbft_version": "${COMETBFT_RELEASE_VERSION}"}
print(dfp.baseimage)
EOF
)

  if [[ "$base_image" =~ :$(get-snapshot-version) ]]; then
    base_image="ghcr.io/digital-asset/decentralized-canton-sync-dev/docker/${base_image}"
  fi

  echo "Base image: $base_image"

  if docker buildx imagetools inspect ${base_image} --raw | jq -r '.manifests[]' &> /dev/null; then
    echo "Base image is a multi-arch image."
    base_image_digest=$(docker buildx imagetools inspect ${base_image} --raw | jq -r '.manifests[] | select(.platform.architecture == "amd64") | .digest')
  else
    echo "Base image is not a multi-arch image, using the default architecture."
    base_image_digest=$(docker buildx imagetools inspect ${base_image} --raw | jq -r '.digest')
  fi



  echo "Base image digest: $base_image_digest"
}

echo
echo
echo "Image: $image"
get_top_base_layer
exit 0

# We blindly retry on failures, as we've seen unexplained failures in the scans that we couldn't resolve.
for i in {1..10}; do
  set +e
  bash <(curl -s https://detect.blackduck.com/detect10.sh) \
    --blackduck.url=https://digitalasset.blackducksoftware.com/ \
    --blackduck.api.token="$BLACKDUCK_HUBDETECT_TOKEN" \
    --detect.docker.image="$image" \
    --detect.tools=DOCKER,SIGNATURE_SCAN \
    --detect.tools.excluded=BINARY_SCAN \
    --detect.project.name=DACH-NY_canton-network-internal_images \
    --detect.project.version.name="$image" \
    --detect.docker.passthrough.imageinspector.service.port.alpine=$((BASE_PORT + (index*3) + 0)) \
    --detect.docker.passthrough.imageinspector.service.port.centos=$((BASE_PORT + (index*3) + 1)) \
    --detect.docker.passthrough.imageinspector.service.port.ubuntu=$((BASE_PORT + (index*3) + 2)) \
    --detect.output.path="${TMP_DIR}/output" \
    --detect.tools.output.path="${TMP_DIR}/tool_output"
  res=$?
  set -e

  if [ $res -eq 0 ]; then
    echo "Black Duck scan completed successfully for image: $image"
    exit 0
  else
    echo "Black Duck scan failed (attempt $i), retrying in 10 seconds..."
    sleep 10
  fi
done
echo "Black Duck scan failed after 10 attempts for image: $image"
exit 1

#TODO(DACH-NY/canton-network-internal#726): run also with `--detect.docker.platform.top.layer.id=sha256:...`, to detect separately vulnerabilities added by us on top of the base image
