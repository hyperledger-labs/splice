
name: 'Setup self-hosted Nix'
description: 'Setup self-hosted Nix'
inputs:
  artifactory_user:
    description: 'The Artifactory user'
    required: true
  artifactory_password:
    description: 'The Artifactory password'
    required: true
  cache_version:
    description: 'The cache version'
    required: true
  should_save:
    description: 'If the nix cache should be saved'
    # this should be run just from one job to ensure we avoid multi write conflicts, which makes everything worse
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Restore nix
      shell: bash
      run: |
        set -euxo pipefail
        git ls-files nix/ | grep -v '[.]md$' | LC_ALL=C sort | xargs sha256sum -b > /tmp/nix-cache-key
        uname -m >> /tmp/nix-cache-key # Add architecture to the cache key
        echo "gh_cache_version: ${{ inputs.cache_version }}" >> /tmp/nix-cache-key # Add cache version to the cache key
        sudo mkdir -p /nix/store
        sudo chown -R $(whoami):$(whoami) /nix
        cat /tmp/nix-cache-key
        cache_key=($(md5sum "/tmp/nix-cache-key"))
        if [ -f "/cache/nix/$cache_key/cached" ]; then
          echo "Restoring nix cache (key $cache_key)"
          # we use rsync here because it's simply faster to install
          rsync -avi /cache/nix/$cache_key/.nix-* $HOME/
          rsync -avi "/cache/nix/$cache_key/nix" $HOME/.config/
          rsync -avi "/cache/nix/$cache_key/nix_store/var/" /nix/var
          sudo mount --bind /cache/nix/$cache_key/nix_store/store /nix/store
        else
          sudo mkdir -p "/cache/nix/$cache_key"
          sudo chown $(whoami):$(whoami) "/cache/nix/$cache_key"
          sudo chown $(whoami):$(whoami) "/cache/nix"
        fi
    - name: Setup Nix
      shell: bash
      run: |
          set -exuo pipefail
          echo 'source ~/.nix-profile/etc/profile.d/nix.sh' > nix.rc
          if [ -f ~/.config/nix/nix.conf ]; then
            exit 0
          else
            # Disabling sandbox because:
            # 1. It doesn't work on CircleCI (sethostname is not allowed)
            # 2. We don't plan to build anything, so the risk is fairly low
            mkdir -p ~/.config/nix
            if [ true ]; then
              cat <<EOF > ~/.config/nix/nix.conf
              sandbox = false
              netrc-file = /etc/nix/netrc
              extra-experimental-features = nix-command flakes
              substituters = file:///cache/nix/binary_cache?trusted=1 https://cache.nixos.org/
              trusted-substituters = file:///cache/nix/binary_cache?trusted=1
              trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=
              cores = 4
              max-jobs = 16
          EOF
            else
              cat <<EOF > ~/.config/nix/nix.conf
              sandbox = false
              netrc-file = /etc/nix/netrc
              extra-experimental-features = nix-command flakes
              cores = 4
              max-jobs = 16
          EOF
            fi
            sh <(curl -fsSL --retry 8 https://releases.nixos.org/nix/nix-2.13.3/install) --no-daemon
            sudo mkdir -p /etc/nix
            sudo chmod a+rw /etc/nix
            cat <<EOF > /etc/nix/netrc
            machine digitalasset.jfrog.io
            login ${{ inputs.artifactory_user }}
            password ${{ inputs.artifactory_password }}
          EOF
            export USER=$(whoami)
            echo "Running nix.sh"
            . ~/.nix-profile/etc/profile.d/nix.sh
            nix develop path:nix -v --profile "$HOME/.nix-shell" --command echo "Done loading packages"
            echo "Garbage collecting to reduce cache size"
            nix-store --gc
          fi

    - name: Invoke nix before saving cache
      uses: ./.github/actions/nix/run_bash_command_in_nix
      with:
        cmd: |
          echo "Validated nix"
          ls -al

    # The nix cache does not change in the workflow, so we can save it immediately, rather than splitting it into pre-&post- steps
    - name: Save nix cache
      shell: bash
      if: ${{ inputs.should_save == 'true' }}
      run: |
          set -euxo pipefail
          echo ~
          chown -R $(whoami):$(whoami) ~
          cat /tmp/nix-cache-key
          cache_key=($(md5sum "/tmp/nix-cache-key"))
          if [ ! -f "/cache/nix/$cache_key/cached" ]; then
            echo "Saving nix"

            sudo -v ; curl https://rclone.org/install.sh | sudo bash

            echo "sourcing nix profile"
            export USER=$(whoami)
            . ~/.nix-profile/etc/profile.d/nix.sh

            nix copy --all --to 'file:///cache/nix/binary_cache?trusted=1' -v

            CLONE_COMMAND="rclone --no-update-dir-modtime --no-update-modtime --size-only --multi-thread-streams=32 --transfers=32 --ignore-existing --links --create-empty-src-dirs --fast-list --metadata --order-by name,mixed --retries 10 copy"
            ${CLONE_COMMAND} "$HOME/" "/cache/nix/$cache_key/" --include ".nix-*/**" --include ".nix-*"
            ${CLONE_COMMAND} $HOME/.config/nix "/cache/nix/$cache_key/nix"

            mkdir -p "/cache/nix/$cache_key/nix_store/store"
            mkdir -p "/cache/nix/$cache_key/nix_store/var"

            #requires to preserve read only during clone
            sudo ${CLONE_COMMAND} /nix/store/ /cache/nix/$cache_key/nix_store/store
            sudo ${CLONE_COMMAND} /nix/var/ "/cache/nix/$cache_key/nix_store/var"

            echo "done" > "/cache/nix/$cache_key/cached"
          fi
