# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Release.Name }}-mediator
  name: {{ .Release.Name }}-mediator
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-mediator
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        {{- toYaml .Values.pod.annotations | nindent 8 }}
      labels:
        app: {{ .Release.Name }}-mediator
        cn-component: mediator
        {{- with $.Values.metrics.migration }}
        active_migration: {{ .active | quote }}
        migration_id: {{ .id | quote }}
        {{- end }}
    spec:
      containers:
      - name: mediator
        image: "{{ .Values.imageRepo }}/canton-mediator:{{ .Chart.AppVersion }}{{ ((.Values.imageDigests).canton_mediator) }}"
        env:
        - name: JAVA_TOOL_OPTIONS
          value: {{ .Values.defaultJvmOptions }} {{ .Values.additionalJvmOptions }}
        - name: CANTON_DOMAIN_POSTGRES_SERVER
          value: {{ .Values.mediator.persistence.host }}
        - name: CANTON_DOMAIN_POSTGRES_PORT
          value: {{ .Values.mediator.persistence.port | quote }}
        - name: CANTON_DOMAIN_POSTGRES_PASSWORD
          valueFrom:
           secretKeyRef:
              name: {{ .Values.mediator.persistence.secretName }}
              key: postgresPassword
        {{- if .Values.mediator.persistence.databaseName }}
        - name: CANTON_MEDIATOR_POSTGRES_DB
          value: {{ .Values.mediator.persistence.databaseName }}
        {{- end }}
        {{- include "splice-util-lib.additional-env-vars" .Values.additionalEnvVars | indent 8}}
        {{- include "splice-util-lib.log-level" .Values | indent 8}}
        {{- with .Values.imagePullPolicy }}
        imagePullPolicy: {{ . }}
        {{- end }}
        ports:
        - containerPort: 5007
          name: cm-adm-api
          protocol: TCP
        - containerPort: 10013
          name: cm-metrics
          protocol: TCP
      {{- if .Values.mediator.resources }}
        resources: {{- toYaml .Values.mediator.resources | nindent 12 }}
        {{- else }}
        {{- with .Values.resources }}
        resources: {{- toYaml . | nindent 12 }}
        {{- end }}
      {{- end }}
        {{- if .Values.enableHealthProbes }}
        livenessProbe:
          grpc:
            port: 5061
            service: liveness
          initialDelaySeconds: {{ .Values.livenessProbeInitialDelaySeconds | default 600 }}
          periodSeconds: 60
          failureThreshold: 5
          timeoutSeconds: 10
        readinessProbe:
          grpc:
            port: 5061
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 3
          timeoutSeconds: 10
        {{- end }}
      restartPolicy: Always
      initContainers:
        - name: pg-init
          image: postgres:14
          env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgresPassword
                  name: {{ .Values.mediator.persistence.secretName }}
          command:
            - 'bash'
            - '-c'
            - |
              until errmsg=$(psql -h {{ .Values.mediator.persistence.host }} -p {{ .Values.mediator.persistence.port }} --username=cnadmin --dbname=cantonnet -c 'create database {{ .Values.mediator.persistence.databaseName }}' 2>&1); do
                if [[ $errmsg == *"already exists"* ]]; then
                  echo "Database {{ .Values.mediator.persistence.databaseName }} already exists. Done."
                  break
                fi

                echo "trying to create postgres database {{ .Values.mediator.persistence.databaseName }}, last error: $errmsg";
                sleep 2;
              done
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-mediator
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}-mediator
    {{- with $.Values.metrics.migration }}
    active_migration: {{ .active | quote }}
    migration_id: {{ .id | quote }}
    {{- end }}
spec:
  selector:
    app: {{ .Release.Name }}-mediator
  ports:
  - name: cm-adm-api
    port: 5007
    protocol: TCP
  - name: cm-metrics
    port: 10013
    protocol: TCP
---
{{- if .Values.enablePostgresMetrics }}
{{- include "splice-util-lib.postgres-metrics" (dict "persistence" .Values.mediator.persistence "namespace" .Release.Namespace "nodeSelector" .Values.nodeSelector "affinity" .Values.affinity "tolerations" .Values.tolerations ) }}
{{- end}}
