# Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0

suite: "Participant values"
templates:
  - participant.yaml
release:
  # Set for testing labels
  name: participant-1
chart:
  # Override for testing labels
  version: 0.1.1
  appVersion: 0.1.0
tests:
  - it: "sets labels as expected"
    set:
      # Things we need just to pass the schema
      persistence:
        host: mock-pg-host
        schema: participant
      auth:
        jwksUrl: "https://mock.com/.well-known/jwks.json"
        targetAudience: "mock_audience"
      # Explicit migration ID for testing
      metrics:
        enabled: true
        migration:
          id: 1
      # Extra label for testing
      pod:
        labels:
          mock: yes-please
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      # Sanity check
      - equal:
          path: spec.template.spec.containers[0].name
          value: participant-1
      # Labels on deployment
      - isSubset:
          path: metadata.labels
          content:
            # Splice-specific
            app: participant-1
            migration_id: "1"
            # k8s/Helm standard
            app.kubernetes.io/instance: participant-1
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: participant-1
            app.kubernetes.io/version: "0.1.0"
            helm.sh/chart: splice-participant-0.1.1
            # Extra for test
            mock: yes-please
      # Labels on pod; should be the same as on deployment
      - isSubset:
          path: spec.template.metadata.labels
          content:
            # Splice-specific
            app: participant-1
            migration_id: "1"
            # k8s/Helm standard
            app.kubernetes.io/instance: participant-1
            app.kubernetes.io/managed-by: Helm
            app.kubernetes.io/name: participant-1
            app.kubernetes.io/version: "0.1.0"
            helm.sh/chart: splice-participant-0.1.1
            # Extra for test
            mock: yes-please
      # Annotations on pod (we didn't set any)
      - isNullOrEmpty:
          path: spec.template.metadata.annotations
  - it: "deploys as expected with some AWS KMS config"
    set:
      # Things we need just to pass the schema
      persistence:
        host: mock-pg-host
        schema: participant
      auth:
        jwksUrl: "https://mock.com/.well-known/jwks.json"
        targetAudience: "mock_audience"
      # More interesting options
      kms:
        # All of these are mock values; we translate to Canton config directly
        type: awwws
        region: mock_region
        extraCantonKey: mock_value
      additionalEnvVars:
        - name: AWWWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: awwws-credentials
              key: accessKeyId
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      # Sanity check
      - equal:
          path: spec.template.spec.containers[0].name
          value: participant-1
      # KMS config
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            # We don't really care about the name of the env var but helm unittest wants it
            name: ADDITIONAL_CONFIG_SPLICE_PARTICIPANT_CRYPTO_PROVIDER_KMS
            value: "canton.participants.participant.crypto {\n  provider = kms\n  kms = {\n    extra-canton-key = mock_value\n    region = mock_region\n    type = awwws\n  }\n}        \n"
      # Secret configured via Helm with valueFrom
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: AWWWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: awwws-credentials
                key: accessKeyId
  - it: "handles multiline additionalEnvVars values"
    set:
      # Things we need just to pass the schema
      persistence:
        host: mock-pg-host
        schema: participant
      auth:
        jwksUrl: "https://mock.com/.well-known/jwks.json"
        targetAudience: "mock_audience"
      additionalEnvVars:
        - name: CUSTOM
          value: |
            multi
            line
            environment
            variable
    documentSelector:
      path: kind
      value: Deployment
    asserts:
      # Sanity check
      - equal:
          path: spec.template.spec.containers[0].name
          value: participant-1
      # multi-line env var
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: CUSTOM
            value: "multi\nline\nenvironment\nvariable\n"
