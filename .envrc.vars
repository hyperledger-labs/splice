# -*- shell-script -*-

### Separate (out of direnv) the env vars that are sourced both locally *and* in CI

### Set UTC timezone, as CometBft always logs in UTC while java tools log using the local timezone
export TZ=UTC

export SPLICE_ROOT="${PWD}"
export TOOLS_LIB=$SPLICE_ROOT/build-tools/lib
export LOGS_PATH=$SPLICE_ROOT/log
export DEPLOYMENT_DIR="${SPLICE_ROOT}/cluster/deployment"
export PULUMI_TEST_DIR=${SPLICE_ROOT}/cluster/pulumi
export EXPECTED_FILES_DIR="${SPLICE_ROOT}/cluster/expected"
export PRIVATE_CONFIGS_PATH=${SPLICE_ROOT}/cluster/configs/configs-private
export PUBLIC_CONFIGS_PATH=${SPLICE_ROOT}/cluster/configs/configs

# TODO(#19438) get rid of configs-internal in Splice
export CONFIGS_DIR=${SPLICE_ROOT}/cluster/configs-internal

# Inrease code heap sizes to avoid issues
# Defaults NonNMethodCodeHeapSize=7M,NonProfiledCodeHeapSize=122M,ProfiledCodeHeapSize=122M
export SBT_OPTS="-Xmx6G -Xms2G -Xss2M -XX:+UseG1GC -XX:NonNMethodCodeHeapSize=32M -XX:NonProfiledCodeHeapSize=256M -XX:ProfiledCodeHeapSize=256M -XX:ReservedCodeCacheSize=544M"

# Provide a simple way to get the path to `sbt-launch.jar` for IntelliJ setup
export SBT_LAUNCH_PATH="$(dirname "$(dirname "$(which sbt)")")/share/sbt/bin/sbt-launch.jar"

# Shortcut var to refer to release bundle contents
export BUNDLE=${SPLICE_ROOT}/apps/app/target/release/splice-node

export PATH=${PATH}:${SPLICE_ROOT}/build-tools
export PATH=${PATH}:${BUNDLE}/bin

export POSTGRES_HOST="localhost"
export POSTGRES_USER=postgres
export POSTGRES_PASSWORD=postgres


# ** Docker&Helm registry configs

export GHCR=ghcr.io
export DEV_REGISTRY=$GHCR/digital-asset/decentralized-canton-sync-dev
export DEV_HELM_REGISTRY=$DEV_REGISTRY/helm
export OCI_DEV_HELM_REGISTRY=oci://$DEV_HELM_REGISTRY
export DEV_DOCKER_REGISTRY=$DEV_REGISTRY/docker
export CACHE_GHCR=us-central1-docker.pkg.dev/da-cn-shared/ghcr
export CACHE_DEV_REGISTRY=$CACHE_GHCR/digital-asset/decentralized-canton-sync-dev
export CACHE_DEV_DOCKER_REGISTRY=$CACHE_DEV_REGISTRY/docker
export RELEASE_REGISTRY=$GHCR/digital-asset/decentralized-canton-sync
export RELEASE_HELM_REGISTRY=$RELEASE_REGISTRY/helm
export OCI_RELEASE_HELM_REGISTRY=oci://$RELEASE_HELM_REGISTRY
export RELEASE_DOCKER_REGISTRY=$RELEASE_REGISTRY/docker


# ** Cluster deployment configs

export CLOUDSDK_COMPUTE_REGION="us-central1"
# We set this everywhere, DBs should always be in a fixed zone.
# However, our clusters are not always in a fixed zone so we don't always set
# CLOUDSDK_COMPUTE_ZONE.
export DB_CLOUDSDK_COMPUTE_ZONE="${CLOUDSDK_COMPUTE_REGION}-a"
# Default to the scratch environment
export CLOUDSDK_CORE_PROJECT="da-cn-scratchnet"
# Default cluster sizing
export GCP_CLUSTER_NODE_TYPE=e2-standard-16
export GCP_CLUSTER_MIN_NODES=0
# A high max-nodes by default to support large deployments and hard migrations
# Should be set to a lower number (currently 8) on CI clusters that do neither of those.
export GCP_CLUSTER_MAX_NODES=20
# The logging variant supports default, that google recommends for up to 100kb/s logs (https://cloud.google.com/kubernetes-engine/docs/how-to/adjust-log-throughput)
# The max throughput variant supports multiple tens of MB/s of logs, but also the agents require 2CPUs and therefore we lose 2 CPUs per node
export GCP_CLUSTER_LOGGING_VARIANT="DEFAULT"
export GCP_DNS_PROJECT="da-gcp-canton-domain"
export GCP_DNS_SA_SECRET="clouddns-dns01-solver-svc-acct"
# DNS Service Account information
export DNS01_SA_KEY_SECRET=dns01-sa-key-secret
export DNS01_SA_IAM_ACCOUNT="dns01-solver@${GCP_DNS_PROJECT}.iam.gserviceaccount.com"
export IS_DEVNET=1
# Specify the default SV count. If IS_DEVNET is set to false, then this is ignored and forcibly overridden to 1 (sv1 only).
export DSO_SIZE=4
export MULTIVALIDATOR_SIZE=0
# We rarely take down some of the stacks in our clusters eg. the ones in the observability and cluster-ingress namespaces.
# This can over time lead to a very large number of secrets (which is how helm stores the release history) resulting in
# unnecessary slowness when running helm commands.
export HELM_MAX_HISTORY_SIZE=10
export OIDC_AUTHORITY_LEDGER_API_AUDIENCE=https://canton.network.global
export OIDC_AUTHORITY_VALIDATOR_AUDIENCE=https://canton.network.global
export OIDC_AUTHORITY_SV_AUDIENCE=https://canton.network.global
export DATA_EXPORT_BUCKET_SA_KEY_SECRET=gcp-bucket-sa-key-secret
export DATA_EXPORT_BUCKET_SA_IAM_ACCOUNT="da-cn-data-exports@da-cn-devnet.iam.gserviceaccount.com"
export SPLICE_OAUTH_TEST_AUTHORITY=canton-network-test.us.auth0.com
export SPLICE_OAUTH_TEST_FRONTEND_CLIENT_ID=Ob8YZSBvbZR3vsM2vGKllg3KRlRgLQSw

export SPLICE_OAUTH_TEST_VALIDATOR_WALLET_USER="auth0|6526fab5214c99a9a8e1e3cc"
export SPLICE_OAUTH_TEST_CLIENT_ID_VALIDATOR=cznBUeB70fnpfjaq9TzblwiwjkVyvh5z

export SPLICE_OAUTH_VALIDATOR_TEST_AUTHORITY=canton-network-validator-test.us.auth0.com

export SPLICE_OAUTH_DEV_AUTHORITY=canton-network-dev.us.auth0.com
export SPLICE_OAUTH_DEV_VALIDATOR_WALLET_USER="auth0|63e3d75ff4114d87a2c1e4f5"

export SPLICE_OAUTH_DEV_CLIENT_ID_SV1=OBpJ9oTyOLuAKF0H2hhzdSFUICt0diIn
export SPLICE_OAUTH_DEV_CLIENT_ID_SV2=rv4bllgKWAiW9tBtdvURMdHW42MAXghz
export SPLICE_OAUTH_DEV_CLIENT_ID_SV3=SeG68w0ubtLQ1dEMDOs4YKPRTyMMdDLk
export SPLICE_OAUTH_DEV_CLIENT_ID_SV4=CqKgSbH54dqBT7V1JbnCxb6TfMN8I1cN
export SPLICE_OAUTH_DEV_CLIENT_ID_SV1_VALIDATOR=7YEiu1ty0N6uWAjL8tCAWTNi7phr7tov
export SPLICE_OAUTH_DEV_CLIENT_ID_SV2_VALIDATOR=5N2kwYLOqrHtnnikBqw8A7foa01kui7h
export SPLICE_OAUTH_DEV_CLIENT_ID_SV3_VALIDATOR=V0RjcwPCsIXqYTslkF5mjcJn70AiD0dh
export SPLICE_OAUTH_DEV_CLIENT_ID_SV4_VALIDATOR=FqRozyrmu2d6dFQYC4J9uK8Y6SXCVrhL
export SPLICE_OAUTH_DEV_CLIENT_ID_VALIDATOR1=cf0cZaTagQUN59C1HBL2udiIBdFh2CWq
export SPLICE_OAUTH_DEV_CLIENT_ID_SPLITWELL_VALIDATOR=hqpZ6TP0wGyG2yYwhH6NLpuo0MpJMQZW

export SPLICE_OAUTH_SV_TEST_AUTHORITY=canton-network-sv-test.us.auth0.com
export SPLICE_OAUTH_SV_TEST_CLIENT_ID_VALIDATOR=bUfFRpl2tEfZBB7wzIo9iRNGTj8wMeIn


# Force auth through gke-gcloud-auth-plugin
# See https://cloud.google.com/blog/products/containers-kubernetes/kubectl-auth-changes-in-gke
export USE_GKE_GCLOUD_AUTH_PLUGIN=true

# CometBFT settings
export COMETBFT_DOCKER_IMAGE="digitalasset-canton-enterprise-docker.jfrog.io/cometbft-canton-network:${COMETBFT_RELEASE_VERSION}"

#Test containers config
## Speed up runs
export TESTCONTAINERS_CHECKS_DISABLE=true
## Use just normal cleanup of containers
export TESTCONTAINERS_RYUK_DISABLED=true
## sshd image required for exposing ports
## we explicitly specify it so we can pre-download it when running in CI
export TESTCONTAINERS_SSHD_CONTAINER_IMAGE="testcontainers/sshd:1.1.0"

export OTEL_COLLECTOR_IMAGE="otel/opentelemetry-collector-contrib:0.81.0"
