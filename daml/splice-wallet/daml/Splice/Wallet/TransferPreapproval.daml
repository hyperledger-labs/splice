-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.Wallet.TransferPreapproval where

import Splice.Util
import Splice.AmuletRules

template TransferPreapprovalProposal
  with
    receiver: Party
    provider: Party
    expectedDso : Optional Party
      -- ^ The DSO party that the receiver expects to bet set on the transfer preapproval.
      -- Must be set. It is only optional due to being introduced as part of a smart-contract upgrade.
  where
    signatory receiver
    observer provider

    choice TransferPreapprovalProposal_Accept: TransferPreapprovalProposal_AcceptResult
      with
        context : PaymentTransferContext
        inputs : [TransferInput]
        expiresAt: Time
      controller provider
      do
        now <- getTime
        require "expiresAt is not in the past" (now < expiresAt)
        AmuletRules_CreateTransferPreapprovalResult{..} <- exercise context.amuletRules AmuletRules_CreateTransferPreapproval
          with
            context
            inputs
            receiver
            provider
            expiresAt
            expectedDso
        return TransferPreapprovalProposal_AcceptResult with ..

data TransferPreapprovalProposal_AcceptResult = TransferPreapprovalProposal_AcceptResult with
  transferPreapprovalCid: ContractId TransferPreapproval
  transferResult: TransferResult
  amuletPaid: Decimal
