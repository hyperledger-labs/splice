-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.Scripts.TestComputeFees where

import DA.Assert
import DA.Time
import Daml.Script

import Splice.Scripts.Util

import Splice.Amulet
import Splice.AmuletRules
import Splice.Expiry
import Splice.Fees


template Test
  with
    sender : Party
  where
    signatory sender
    choice Test_ComputeFees : [Decimal]
      with
        context : PaymentTransferContext
        outputs : [TransferOutput]
      controller sender
      do exerciseComputeFees context sender outputs


test = script do
    DefaultAppWithUsers{..} <- setupDefaultAppWithUsers
    now <- getTime
    context <- getPaymentTransferContext app alice
    test <- submitUser alice.userId $ createCmd Test with
      sender = alice.primaryParty
    let outputs =
          [ TransferOutput with
              receiver = alice.primaryParty
              receiverFeeRatio = 0.4
              amount = 20.0
              lock = None
          , TransferOutput with
              receiver = alice.primaryParty
              receiverFeeRatio = 0.0
              amount = 20.0
              lock = Some TimeLock with
                expiresAt = addRelTime now (days 1)
                holders = [bob.primaryParty, bob.primaryParty, provider1.primaryParty]
          , TransferOutput with
              receiver = bob.primaryParty
              receiverFeeRatio = 0.0
              amount = 20.0
              lock = None
          , TransferOutput with
              receiver = bob.primaryParty
              receiverFeeRatio = 0.6
              amount = 20.0
              lock = None
          , TransferOutput with
              receiver = bob.primaryParty
              receiverFeeRatio = 0.0
              amount = 20.0
              lock = Some TimeLock with
                expiresAt = addRelTime now (days 1)
                holders = [bob.primaryParty, bob.primaryParty, provider1.primaryParty]
          , TransferOutput with
              receiver = bob.primaryParty
              receiverFeeRatio = 0.0
              amount = 101.0
              lock = None
          ]
    fees <- submitUser alice.userId $ exerciseCmd test Test_ComputeFees with ..
    fees ===
      [ 0.03                  -- flat fee
      , 0.03 + 0.005 * 2.0    -- flat + lock holder
      , 0.03 + 0.01 * 20.0    -- create + transfer
      , 0.03 + 0.01 * 20.0    -- create + transfer (receiverFeeRatio does not matter)
      , 0.03 + 0.01 * 20.0 + 0.005 * 1.0    -- flat + transfer + lock holders different from the receiver
      , 0.03 + 0.01 * 100.0 + 0.001 * 1.0  -- create + stepped transfer
      ]
    pure()

testScaledHoldingFees: Script ()
testScaledHoldingFees = do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers

  let
    holdingFee = 1.0
    initialAmuletPrice = 2.0
    scaledHoldingFee = (holdingFee / initialAmuletPrice)

  Some (amuletRulesCid, amuletRules) <- queryAmuletRulesByKey app.dso

  -- Set holding fee and initial amulet price
  now <- getTime
  submitMulti [app.dso] [app.dso] $ exerciseCmd amuletRulesCid AmuletRules_AddFutureAmuletConfigSchedule with
    newScheduleItem = (
          addRelTime now (minutes 1),
          amuletRules.configSchedule.initialValue with
            transferConfig = amuletRules.configSchedule.initialValue.transferConfig with
              holdingFee = RatePerRound holdingFee
        )

  advanceToIssuanceWithPrice app initialAmuletPrice
  cid <- tap app alice 100.0
  Some amulet <- queryContractId @Amulet alice.primaryParty cid
  amulet.amount.ratePerRound.rate === scaledHoldingFee

  -- Change amulet price, and advance 3 rounds
  advanceToIssuanceWithPrice app 10.0

  -- Alice's amulets were merged in the process, get the new one (which should still have a holding fee based on the old fee and amulet price)
  [(curAmuletCid, curAmulet)] <- queryFilter @Amulet alice.primaryParty (\c -> c.owner == alice.primaryParty)
  curAmulet.amount.ratePerRound.rate === scaledHoldingFee

  -- Make a transfer, so that holding fees will be charged
  context <- getPaymentTransferContext app alice
  transferResult <- submitMulti [alice.primaryParty, bob.primaryParty] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_Transfer with
      transfer = Transfer with
        sender = alice.primaryParty
        provider = alice.primaryParty
        inputs = [InputAmulet curAmuletCid]
        outputs = [ TransferOutput with
                      receiver = bob.primaryParty
                      amount = 10.0
                      lock = None
                      receiverFeeRatio = 1.0]
      context = context.context

  -- Actual holding fee should be based on the amulet price when the amulet was created, not the current one
  transferResult.summary.holdingFees === scaledHoldingFee

  pure ()
