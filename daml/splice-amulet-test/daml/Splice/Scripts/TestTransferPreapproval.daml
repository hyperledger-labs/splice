-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.Scripts.TestTransferPreapproval where

import Daml.Script
import DA.Assert
import DA.Time
import Splice.Scripts.Util
import Splice.Amulet
import Splice.AmuletRules
import Splice.ExternalPartyAmuletRules
import Splice.Fees
import Splice.Types

createTransferPreapproval : Party -> Party -> Party -> Time -> Script (ContractId TransferPreapproval)
createTransferPreapproval receiver provider dso expiresAt = do
  now <- getTime
  submitMulti [receiver, provider, dso] [] $ createCmd TransferPreapproval with
      receiver
      provider
      dso
      validFrom = now
      lastRenewedAt = now
      expiresAt

testTransferPreapprovalSend : Script ()
testTransferPreapprovalSend = script do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers

  now <- getTime
  let expiresAt = (now `addRelTime` days 1)
  transferPreapprovalCid <- createTransferPreapproval alice.primaryParty aliceValidator.primaryParty app.dso expiresAt

  -- Externally signed transaction (or not if bob is not also externally hosted, like for a sweep) to send amulets
  context <- getPaymentTransferContext app bob
  amuletCid <- tap app bob 50.0
  submitMulti [bob.primaryParty] [app.dso] $ exerciseCmd transferPreapprovalCid TransferPreapproval_Send
    with
      sender = bob.primaryParty
      context
      inputs = [InputAmulet amuletCid]
      amount = 10.0

  -- Move forward in time to expire pre-approval
  passTime (days 1)

  -- Send fails if the pre-approval has expired
  context <- getPaymentTransferContext app bob
  amuletCid <- tap app bob 50.0
  submitMultiMustFail [bob.primaryParty] [app.dso] $ exerciseCmd transferPreapprovalCid TransferPreapproval_Send
      with
        sender = bob.primaryParty
        context
        inputs = [InputAmulet amuletCid]
        amount = 10.0

  pure ()

testTransferPreapprovalRenewal : Script ()
testTransferPreapprovalRenewal = script do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers

  now <- getTime
  let expiresAt = (now `addRelTime` days 1)
  transferPreapprovalCid <- createTransferPreapproval alice.primaryParty aliceValidator.primaryParty app.dso expiresAt
  Some transferPreapproval <- queryContractId app.dso transferPreapprovalCid
  providerTransferContext <- getPaymentTransferContext app aliceValidator

  -- Renewal fails if provided `newExpiresAt` is earlier than previous `expiresAt`
  providerAmuletCid <- tap app aliceValidator 10.0
  submitMultiMustFail [aliceValidator.primaryParty] [app.dso] $
    exerciseCmd transferPreapprovalCid TransferPreapproval_Renew with
      context = providerTransferContext
      inputs = [InputAmulet providerAmuletCid]
      newExpiresAt = now

  -- Provider can renew the pre-approval (before expiry)
  let newExpiresAt = now `addRelTime` (days 2)
  result <- submitMulti [aliceValidator.primaryParty] [app.dso] $
    exerciseCmd transferPreapprovalCid TransferPreapproval_Renew with
      context = providerTransferContext
      inputs = [InputAmulet providerAmuletCid]
      newExpiresAt
  Some renewedPreapproval <- queryContractId app.dso result.transferPreapprovalCid
  renewedPreapproval === transferPreapproval with
    lastRenewedAt = now
    expiresAt = newExpiresAt

  -- Move forward in time to expire pre-approval
  passTime (days 2)

  -- Renewal fails if the pre-approval has expired
  providerAmuletCid2 <- tap app aliceValidator 10.0
  submitMultiMustFail [aliceValidator.primaryParty] [app.dso] $
    exerciseCmd transferPreapprovalCid TransferPreapproval_Renew with
      context = providerTransferContext
      inputs = [InputAmulet providerAmuletCid2]
      newExpiresAt = now


testTransferPreapprovalCancelExpire : Script ()
testTransferPreapprovalCancelExpire = script do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers

  now <- getTime
  let expiresAt = (now `addRelTime` days 1)

  -- User can cancel pre-approval
  transferPreapprovalCid <- createTransferPreapproval alice.primaryParty aliceValidator.primaryParty app.dso expiresAt
  submit alice.primaryParty $ exerciseCmd transferPreapprovalCid (TransferPreapproval_Cancel alice.primaryParty)

  -- Provider can cancel pre-approval
  transferPreapprovalCid2 <- createTransferPreapproval alice.primaryParty aliceValidator.primaryParty app.dso expiresAt
  submit aliceValidator.primaryParty $ exerciseCmd transferPreapprovalCid2 (TransferPreapproval_Cancel aliceValidator.primaryParty)

  transferPreapprovalCid3 <- createTransferPreapproval alice.primaryParty aliceValidator.primaryParty app.dso expiresAt
  -- Move forward in time to expire pre-approval
  passTime (days 1)

  -- Expired pre-approvals cannot be canceled...
  submitMustFail alice.primaryParty $ exerciseCmd transferPreapprovalCid3 (TransferPreapproval_Cancel alice.primaryParty)
  submitMustFail aliceValidator.primaryParty $ exerciseCmd transferPreapprovalCid3 (TransferPreapproval_Cancel aliceValidator.primaryParty)
  -- ...but the DSO party can archive them
  submit app.dso $ exerciseCmd transferPreapprovalCid3 TransferPreapproval_Expire

  pure ()

testTransferCommand = script do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers

  externalParty <- allocateParty "externalParty"
  wrongReceiver <- allocateParty "wrongReceiver"
  fakeDso <- allocateParty "fake-dso"
  (externalPartyAmuletRulesCid, _) <- getExternalPartyAmuletRules app

  now <- getTime

  let expiresAt = now `addRelTime` hours 24

  transferPreapprovalCid <- createTransferPreapproval externalParty aliceValidator.primaryParty app.dso expiresAt
  transferPreapprovalFakeDsoCid <- createTransferPreapproval externalParty aliceValidator.primaryParty fakeDso expiresAt
  transferPreapprovalWrongReceiverCid <- createTransferPreapproval wrongReceiver aliceValidator.primaryParty app.dso expiresAt

  ExternalPartyAmuletRules_CreateTransferCommandResult transferCmd <- submitMulti [alice.primaryParty] [app.dso] $ exerciseCmd externalPartyAmuletRulesCid ExternalPartyAmuletRules_CreateTransferCommand
    with
      sender = alice.primaryParty
      receiver = externalParty
      amount = 42.0
      expiresAt = now `addRelTime` hours 12
      nonce = 0

  transferCounterCid <- submit app.dso $ createCmd TransferCommandCounter with
    dso = app.dso
    sender = alice.primaryParty
    nextNonce = 0

  amulet <- tap app alice 50.0

  featuredAppRight <- featureApp app aliceValidator

  context <- getPaymentTransferContextFeaturedApp app alice (Some featuredAppRight)

  amulets <- query @Amulet externalParty
  amulets === []
  appRewards <- query @AppRewardCoupon aliceValidator.primaryParty
  appRewards === []

  -- DSO party is checked
  _ <- submitMustFail app.dso $ exerciseCmd transferCmd TransferCommand_Send
    with
      context
      inputs = [InputAmulet amulet]
      transferPreapprovalCidO = Some transferPreapprovalFakeDsoCid
      transferCounterCid

  -- receiver is checked
  _ <- submitMustFail app.dso $ exerciseCmd transferCmd TransferCommand_Send
    with
      context
      inputs = [InputAmulet amulet]
      transferPreapprovalCidO = Some transferPreapprovalWrongReceiverCid
      transferCounterCid

  TransferCommand_SendResult (TransferCommandResultSuccess _) <- submit app.dso $ exerciseCmd transferCmd TransferCommand_Send
    with
      context = context
      inputs = [InputAmulet amulet]
      transferPreapprovalCidO = Some transferPreapprovalCid
      transferCounterCid

  [(transferCounterCid, _)] <- query @TransferCommandCounter alice.primaryParty

  amulets <- query @Amulet externalParty
  map snd amulets === [Amulet app.dso externalParty (ExpiringAmount 42.0 (Round 1) (RatePerRound 0.00002))]
  None <- queryContractId app.dso transferCmd
  appRewards <- query @AppRewardCoupon aliceValidator.primaryParty
  map snd appRewards === [AppRewardCoupon app.dso aliceValidator.primaryParty True 1.45 (Round 1)]

  ExternalPartyAmuletRules_CreateTransferCommandResult transferCmd <- submitMulti [alice.primaryParty] [app.dso] $ exerciseCmd externalPartyAmuletRulesCid ExternalPartyAmuletRules_CreateTransferCommand
    with
      sender = alice.primaryParty
      receiver = externalParty
      amount = 42.0
      expiresAt = now `addRelTime` hours 12
      nonce = 1

  amulet <- tap app alice 50.0

  context <- getPaymentTransferContext app alice

  passTime (hours 13)

  -- Fails if time is after cmd expiry
  submitMustFail app.dso $ exerciseCmd transferCmd TransferCommand_Send
    with
      context = context
      inputs = [InputAmulet amulet]
      transferPreapprovalCidO = Some transferPreapprovalCid
      transferCounterCid

  now <- getTime

  ExternalPartyAmuletRules_CreateTransferCommandResult transferCmd <- submitMulti [alice.primaryParty] [app.dso] $ exerciseCmd externalPartyAmuletRulesCid ExternalPartyAmuletRules_CreateTransferCommand
    with
      sender = alice.primaryParty
      receiver = externalParty
      amount = 42.0
      expiresAt = now `addRelTime` hours 1
      nonce = 1

  amulet <- tap app alice 10.0

  -- fails with out of funds
  TransferCommand_SendResult (TransferCommandResultFailure reason) <- submit app.dso $ exerciseCmd transferCmd TransferCommand_Send
    with
      context = context
      inputs = [InputAmulet amulet]
      transferPreapprovalCidO = Some transferPreapprovalCid
      transferCounterCid

  reason === ITR_InsufficientFunds 32.45

  [(transferCounterCid, transferCounter)] <- query @TransferCommandCounter alice.primaryParty
  -- counter increases even on failed transfers
  transferCounter.nextNonce === 2

  -- sender can withdraw
  ExternalPartyAmuletRules_CreateTransferCommandResult transferCmd <- submitMulti [alice.primaryParty] [app.dso] $ exerciseCmd externalPartyAmuletRulesCid ExternalPartyAmuletRules_CreateTransferCommand
    with
      sender = alice.primaryParty
      receiver = externalParty
      amount = 42.0
      expiresAt = now `addRelTime` hours 1
      nonce = 2

  submit alice.primaryParty $ exerciseCmd transferCmd TransferCommand_Withdraw

  None <- queryContractId app.dso transferCmd

  -- stakeholder can expire
  ExternalPartyAmuletRules_CreateTransferCommandResult transferCmd <- submitMulti [alice.primaryParty] [app.dso] $ exerciseCmd externalPartyAmuletRulesCid ExternalPartyAmuletRules_CreateTransferCommand
    with
      sender = alice.primaryParty
      receiver = externalParty
      amount = 42.0
      expiresAt = now `addRelTime` hours 1
      nonce = 2

  submitMustFail app.dso $ exerciseCmd transferCmd (TransferCommand_Expire app.dso)

  passTime (hours 1)
  now <- getTime

  submit app.dso $ exerciseCmd transferCmd (TransferCommand_Expire app.dso)

  None <- queryContractId app.dso transferCmd

  -- Old nonces get immediately rejected and archive the transer command
  ExternalPartyAmuletRules_CreateTransferCommandResult transferCmd <- submitMulti [alice.primaryParty] [app.dso] $ exerciseCmd externalPartyAmuletRulesCid ExternalPartyAmuletRules_CreateTransferCommand
    with
      sender = alice.primaryParty
      receiver = externalParty
      amount = 42.0
      expiresAt = now `addRelTime` hours 1
      nonce = 1

  TransferCommand_SendResult (TransferCommandResultFailure reason) <- submit app.dso $ exerciseCmd transferCmd TransferCommand_Send
    with
      context = context
      inputs = [InputAmulet amulet]
      transferPreapprovalCidO = Some transferPreapprovalCid
      transferCounterCid

  reason === ITR_Other "Expected nonce 1 is smaller than current counter 2"

  ExternalPartyAmuletRules_CreateTransferCommandResult transferCmdFuture <- submitMulti [alice.primaryParty] [app.dso] $ exerciseCmd externalPartyAmuletRulesCid ExternalPartyAmuletRules_CreateTransferCommand
    with
      sender = alice.primaryParty
      receiver = externalParty
      amount = 42.0
      expiresAt = now `addRelTime` hours 1
      nonce = 3

  amulet <- tap app alice 50.0

  _ <- submitMustFail app.dso $ exerciseCmd transferCmdFuture TransferCommand_Send
    with
      context = context
      inputs = [InputAmulet amulet]
      transferPreapprovalCidO = Some transferPreapprovalCid
      transferCounterCid

  -- Sequence another transfer with nonce 2

  ExternalPartyAmuletRules_CreateTransferCommandResult transferCmd <- submitMulti [alice.primaryParty] [app.dso] $ exerciseCmd externalPartyAmuletRulesCid ExternalPartyAmuletRules_CreateTransferCommand
    with
      sender = alice.primaryParty
      receiver = externalParty
      amount = 42.0
      expiresAt = now `addRelTime` hours 1
      nonce = 2

  amulet <- tap app alice 50.0

  TransferCommand_SendResult (TransferCommandResultSuccess _) <- submit app.dso $ exerciseCmd transferCmd TransferCommand_Send
    with
      context = context
      inputs = [InputAmulet amulet]
      transferPreapprovalCidO = Some transferPreapprovalCid
      transferCounterCid

  [(transferCounterCid, _)] <- query @TransferCommandCounter alice.primaryParty

  amulet <- tap app alice 50.0

  -- transferCmdFuture can now be submitted after the counter advanced
  TransferCommand_SendResult (TransferCommandResultSuccess _) <- submit app.dso $ exerciseCmd transferCmdFuture TransferCommand_Send
    with
      context = context
      inputs = [InputAmulet amulet]
      transferPreapprovalCidO = Some transferPreapprovalCid
      transferCounterCid

  [(transferCounterCid, transferCounter)] <- query @TransferCommandCounter alice.primaryParty
  transferCounter.nextNonce === 4

  receiverNoPreapproval <- allocateParty "receiver-no-preapproval"
  ExternalPartyAmuletRules_CreateTransferCommandResult transferCmd <- submitMulti [alice.primaryParty] [app.dso] $ exerciseCmd externalPartyAmuletRulesCid ExternalPartyAmuletRules_CreateTransferCommand
    with
      sender = alice.primaryParty
      receiver = receiverNoPreapproval
      amount = 42.0
      expiresAt = now `addRelTime` hours 1
      nonce = 4

  -- transferCmdFuture can now be submitted after the counter advanced
  TransferCommand_SendResult (TransferCommandResultFailure msg) <- submit app.dso $ exerciseCmd transferCmd TransferCommand_Send
    with
      context = context
      inputs = []
      transferPreapprovalCidO = None -- no preapproval
      transferCounterCid

  msg === ITR_Other ("No TransferPreapproval for receiver " <> show receiverNoPreapproval)

  [(_, transferCounter)] <- query @TransferCommandCounter alice.primaryParty
  transferCounter.nextNonce === 5
  None <- queryContractId app.dso transferCmd

  pure ()
