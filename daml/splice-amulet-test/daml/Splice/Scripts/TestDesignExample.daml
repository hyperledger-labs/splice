-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.Scripts.TestDesignExample where

import DA.Assert
import DA.List.Total
import qualified DA.Map as Map
import DA.Time
import Daml.Script

import Splice.Util
import Splice.Amulet
import Splice.AmuletRules
import Splice.Expiry
import Splice.Types
import Splice.RelRound
import Splice.Fees
import Splice.Scripts.Util

arbiterPaymentAmount : Decimal
arbiterPaymentAmount = 1.0

template Escrow
  with
    dso : Party
    arbiter : Party
    p : Party
  where
    signatory arbiter
    observer p
    nonconsuming choice Refresh : TransferResult
      with
        lockedAmulet : ContractId LockedAmulet
        paymentAmulet : ContractId Amulet
        transferContext : AppTransferContext
      controller p
      do LockedAmulet{lock,amulet=locked} <- fetchButArchiveLater (ForOwner with dso; owner = p) lockedAmulet -- archived as part of unlocking
         require "lock holder matches locked amulet " ([arbiter] == lock.holders)
         result <- exercise lockedAmulet (LockedAmulet_Unlock transferContext.openMiningRound)
         let cid = result.amuletSum.amulet
         let transfer = Transfer with
               sender = p
               provider = arbiter
               inputs = [InputAmulet cid, InputAmulet paymentAmulet]
               outputs =
                 [ TransferOutput with
                     receiver = p
                     amount = locked.amount.initialAmount
                     lock = Some TimeLock with
                       holders = [arbiter]
                       expiresAt = lock.expiresAt `addRelTime` days 90
                     receiverFeeRatio = 0.0
                 , TransferOutput with
                     receiver = arbiter
                     amount = arbiterPaymentAmount
                     lock = None
                     receiverFeeRatio = 1.0
                 ]
         exerciseAppTransfer transferContext transfer

test_designExample : Script ()
test_designExample= do
  -- bootstrap app
  app <- setupApp

  runNextIssuance app
  runAmuletDepositBots app

  alice <- setupUser app "alice" app.dso
  arbiter <- setupUser app "arbiter" app.dso
  featureApp app arbiter

  -- retrieve the config
  config <- getAmuletConfig app
  let transferConfig = config.transferConfig

  -- start the example

  tap app alice 1500.0

  escrow <- submitUser arbiter.userId $ createCmd (Escrow app.dso arbiter.primaryParty alice.primaryParty)

  t0 <- getTime
  (_, c0) <- getLatestOpenRound app

  let lockedAmuletAmount = 1000.25
  lockTo1 app alice arbiter.primaryParty lockedAmuletAmount (days 90)

  -- check rewards that are issued for the locking tx
  [(_, appRewardCoupon)] <- queryFilter @AppRewardCoupon app.dso (\reward -> reward.round.number == 2)
  appRewardCoupon === AppRewardCoupon with
    dso = app.dso
    provider = alice.primaryParty
    featured = False
    amount = transferConfig.createFee.fee + transferConfig.lockHolderFee.fee
    round = Round 2

  [(lockedAmulet, _)] <- query @LockedAmulet alice.primaryParty
  -- advance 40k rounds
  runNextIssuance app
  skipNRounds app 39_999
  (_, c1) <- getLatestOpenRound app

  let refreshAmuletAmount = 5.0
  pay app alice alice.primaryParty refreshAmuletAmount
  -- check reward issued by this payment
  [(_, appRewardCoupon)] <- queryFilter @AppRewardCoupon app.dso (\reward -> reward.round.number == 40002)
  appRewardCoupon === AppRewardCoupon with
    dso = app.dso
    provider = alice.primaryParty
    featured = False
    amount = transferConfig.createFee.fee
    round = Round 40002

  [(paymentAmulet, _)] <- queryFilter @Amulet alice.primaryParty (\c -> c.amount.initialAmount == refreshAmuletAmount)

  -- advance 10k rounds
  runNextIssuance app
  skipNRounds app 9_999

  (_, c2) <- getLatestOpenRound app

  prevAmuletCids <- map fst <$> query @Amulet app.dso
  prevLockedAmuletCids <- map fst <$> query @LockedAmulet app.dso

  normalizedBalanceBeforeTransfer <- getNormalizedBalance app.dso

  transferContext <- getAppTransferContext app arbiter
  result <- submitUser alice.userId $ exerciseCmd escrow Refresh with
    lockedAmulet
    paymentAmulet
    transferContext

  normalizedBalanceAfterTransfer <- getNormalizedBalance app.dso

  let lockedAmuletFee = transferConfig.createFee.fee + transferConfig.lockHolderFee.fee
      transferredAmuletFee =
        transferConfig.createFee.fee
        + chargeSteppedRate transferConfig.transferFee arbiterPaymentAmount
      holdingFees =
        (chargeRatePerRound transferConfig.holdingFee (c2.round `subRound` c1.round)
        + chargeRatePerRound transferConfig.holdingFee (c2.round `subRound` c0.round)) -- holding fees
      inputAmuletHoldingFees = transferConfig.holdingFee.rate * 2.0 -- there are 2 input amulets
      outputAmuletHoldingFees = transferConfig.holdingFee.rate * 3.0  -- there are 2 output amulets + 1 amulet for the change
      outputFees = [lockedAmuletFee, transferredAmuletFee]
      senderChangeAmount =
        refreshAmuletAmount
        - arbiterPaymentAmount
        - holdingFees
        - lockedAmuletFee
        - transferConfig.createFee.fee -- fee for returning change
        -- no subtraction of transferredAmuletFee as that fee is paid by the receiver

  let ignoreBalanceChanges = result.summary with balanceChanges = Map.empty
  ignoreBalanceChanges === TransferSummary with
    inputAppRewardAmount = 0.0
    inputValidatorRewardAmount = 0.0
    inputValidatorFaucetAmount = Some 0.0
    inputSvRewardAmount = 0.0
    inputAmuletAmount = refreshAmuletAmount + lockedAmuletAmount
    balanceChanges = Map.empty
    holdingFees
    outputFees
    senderChangeAmount
    senderChangeFee = transferConfig.createFee.fee
    amuletPrice = 1.0

  let totalBalanceChange = sum $ Map.values result.summary.balanceChanges

  totalBalanceChange.changeToHoldingFeesRate  === outputAmuletHoldingFees - inputAmuletHoldingFees
  totalBalanceChange.changeToInitialAmountAsOfRoundZero  === normalizedBalanceAfterTransfer - normalizedBalanceBeforeTransfer

  allAmulets <- query @Amulet app.dso
  allLockedAmulets <- query @LockedAmulet app.dso
  let newAmulets = map snd $ filter (\(cid, _) -> cid `notElem` prevAmuletCids) allAmulets
      newLockedAmulets = map snd $ filter (\(cid, _) -> cid `notElem` prevLockedAmuletCids) allLockedAmulets
  length newAmulets === 2
  length newLockedAmulets === 1

  let Some newLocked = head newLockedAmulets
      Some change = find (\c -> c.owner == alice.primaryParty) newAmulets
      Some payment = find (\c -> c.owner == arbiter.primaryParty) newAmulets
  newLocked === LockedAmulet with
    lock = TimeLock with
      holders = [arbiter.primaryParty]
      expiresAt = t0 `addRelTime` days 180
    amulet = Amulet with
      dso = app.dso
      owner = alice.primaryParty
      amount = expiringAmount transferConfig.holdingFee 1000.25 c2.round
  change === Amulet with
    dso = app.dso
    owner = alice.primaryParty
    amount = expiringAmount transferConfig.holdingFee senderChangeAmount c2.round

  payment === Amulet with
    dso = app.dso
    owner = arbiter.primaryParty
    amount =
      let amount = arbiterPaymentAmount - transferredAmuletFee
      in expiringAmount transferConfig.holdingFee amount c2.round

  -- check app reward issued by the escrow refresh
  [(_, appRewardCoupon)] <- queryFilter @AppRewardCoupon app.dso (\reward -> reward.round.number == 50002)
  appRewardCoupon === AppRewardCoupon with
    dso = app.dso
    provider = arbiter.primaryParty
    featured = True
    amount =
      -- rewards are issued for all output fees, but not the senderChangeFee
      sum outputFees +
      transferConfig.extraFeaturedAppRewardAmount
    round = Round 50002

  -- the 'arbiter' also receives featured app rewards when he's the sender and provider of a transfer
  runNextIssuance app
  let reimbursementAmount = 0.5
  pay app arbiter alice.primaryParty reimbursementAmount

  [(_, appReward)] <- queryFilter @AppRewardCoupon app.dso (\reward -> reward.round.number == 50003)
  appReward === AppRewardCoupon with
    dso = app.dso
    provider = arbiter.primaryParty
    featured = True
    amount =
      transferConfig.createFee.fee
      + chargeSteppedRate transferConfig.transferFee reimbursementAmount
      + transferConfig.extraFeaturedAppRewardAmount
    round = Round 50003

  return ()
