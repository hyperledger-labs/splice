-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.Scripts.TestExternalParty where

import Daml.Script
import DA.Time
import DA.Assert
import Splice.AmuletRules
import Splice.Scripts.Util
import Splice.Amulet (ValidatorRight)

testExternalPartySetup = script do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers

  externalUser <- setupUserWithoutValidatorRight app "externalUser"
  now <- getTime
  let preapprovalExpiresAt = now `addRelTime` days 1

  -- This would be submitted by the validator hosting the external party
  -- As part of the creation of the proposal, the validator also pays for the creation of the
  -- initial pre-approval contract to enable receiving amulets for the external party.
  [(amuletRulesCid, _)] <- query @AmuletRules app.dso
  context <- getPaymentTransferContext app aliceValidator
  amuletCid <- tap app aliceValidator 50.0
  AmuletRules_CreateExternalPartySetupProposalResult{..} <- submitMulti [aliceValidator.primaryParty] [app.dso] $ exerciseCmd amuletRulesCid AmuletRules_CreateExternalPartySetupProposal with
    context = context
    inputs = [InputAmulet amuletCid]
    user = externalUser.primaryParty
    validator = aliceValidator.primaryParty
    preapprovalExpiresAt

  -- Externally signed transaction to accept proposal.
  ExternalPartySetupProposal_AcceptResult{..} <- submit externalUser.primaryParty $ exerciseCmd proposalCid ExternalPartySetupProposal_Accept {}
  -- check transfer pre-approval was created
  Some transferPreapproval1 <- queryContractId app.dso transferPreapprovalCid
  transferPreapproval1 === TransferPreapproval with
    dso = app.dso
    receiver = externalUser.primaryParty
    provider = aliceValidator.primaryParty
    validFrom = now
    lastRenewedAt = now
    expiresAt = preapprovalExpiresAt
  -- check validator right was granted
  [(rightCid, _)] <- queryFilter @ValidatorRight aliceValidator.primaryParty (\r -> r.user == externalUser.primaryParty)
  rightCid === validatorRightCid

  pure ()
