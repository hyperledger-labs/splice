-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.Scripts.TestAmuletRulesConfigSchedule where

import DA.Assert
import DA.Time
import Daml.Script

import Splice.AmuletRules
import Splice.AmuletConfig
import Splice.Fees
import Splice.Schedule
import Splice.Scripts.Parameters
import Splice.Scripts.Util


testAddFutureAmuletConfigSchedule: Script ()
testAddFutureAmuletConfigSchedule = do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers

  runNextIssuance app
  context <- getPaymentTransferContext app alice

  runNextIssuance app

  now <- getTime
  let tenHoursBefore = addRelTime now (hours (-10))
      thirteenHoursLater = addRelTime now (hours 13)
      oneYearLater = addRelTime now (days 365)
      elevenDaysLater = addRelTime now (days 11)
      hundredYearsLater = addRelTime now (days (100 * 365))

      amuletConfig_initial = makeAmuletConfig (minutes 10) (RatePerRound 0.000020)
      amuletConfig1 = makeAmuletConfig (seconds 100) (RatePerRound 0.000004)
      amuletConfig2 = makeAmuletConfig (seconds 120) (RatePerRound 0.000016)
      amuletConfig3 = makeAmuletConfig (seconds 170) (RatePerRound 0.000012)

      newSchedule1 = Schedule with
        initialValue = amuletConfig_initial
        futureValues = [ (oneYearLater, amuletConfig2) ]

      newSchedule2 = Schedule with
        initialValue = amuletConfig_initial
        futureValues = [ (oneYearLater, amuletConfig2), (hundredYearsLater, amuletConfig3) ]

      newSchedule3 = Schedule with
        initialValue = amuletConfig_initial
        futureValues = [ (thirteenHoursLater, amuletConfig1), (oneYearLater, amuletConfig2), (hundredYearsLater, amuletConfig3) ]

      newSchedule4 = Schedule with
        initialValue = amuletConfig1
        futureValues = [ (elevenDaysLater, amuletConfig3), (oneYearLater, amuletConfig2), (hundredYearsLater, amuletConfig3) ]

  -- a scheduled item in 1 year gets properly appended to empty futureValues and the old futureValue got pruned
  submitMulti [app.dso] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_AddFutureAmuletConfigSchedule with
      newScheduleItem = (oneYearLater, amuletConfig2)
  Some (_, amuletRules) <- queryAmuletRulesByKey app.dso
  amuletRules.configSchedule === newSchedule1

  -- a scheduled item in 10 year gets properly appended to the current futureValues
  context <- getPaymentTransferContext app alice
  submitMulti [app.dso] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_AddFutureAmuletConfigSchedule with
      newScheduleItem = (hundredYearsLater, amuletConfig3)
  Some (_, amuletRules) <- queryAmuletRulesByKey app.dso
  amuletRules.configSchedule === newSchedule2

  -- a scheduled item 13 hours ago fails to be added to the current futureValues
  context <- getPaymentTransferContext app alice
  submitMultiMustFail [app.dso] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_AddFutureAmuletConfigSchedule with
      newScheduleItem = (tenHoursBefore, amuletConfig1)
  Some (_, amuletRules) <- queryAmuletRulesByKey app.dso
  amuletRules.configSchedule === newSchedule2

  -- a scheduled item planned at an already defined time fails to be added to the current futureValues
  submitMultiMustFail [app.dso] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_AddFutureAmuletConfigSchedule with
      newScheduleItem = (hundredYearsLater, amuletConfig3)
  Some (_, amuletRules) <- queryAmuletRulesByKey app.dso
  amuletRules.configSchedule === newSchedule2

  -- a scheduled item in 13 hours gets properly prepended to the current futureValues
  context <- getPaymentTransferContext app alice
  submitMulti [app.dso] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_AddFutureAmuletConfigSchedule with
      newScheduleItem = (thirteenHoursLater, amuletConfig1)
  Some (_, amuletRules) <- queryAmuletRulesByKey app.dso
  amuletRules.configSchedule === newSchedule3

  passTime (hours 20)

  -- 20 hours later: as a new schedule is inserted the whole schedule gets pruned properly
  context <- getPaymentTransferContext app alice
  submitMulti [app.dso] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_AddFutureAmuletConfigSchedule with
      newScheduleItem = (elevenDaysLater, amuletConfig3)
  Some (_, amuletRules) <- queryAmuletRulesByKey app.dso
  amuletRules.configSchedule === newSchedule4

  return ()


testRemoveFutureAmuletConfigSchedule: Script ()
testRemoveFutureAmuletConfigSchedule = do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers
  now <- getTime

  runNextIssuance app
  context <- getPaymentTransferContext app alice

  runNextIssuance app
  let thirteenHoursLater = addRelTime now (hours 13)
      oneYearLater = addRelTime now (days 365)

      amuletConfig_initial = makeAmuletConfig (minutes 10) (RatePerRound 0.00002)
      amuletConfig1 = makeAmuletConfig (seconds 100) (RatePerRound 0.000004)

      newSchedule1 = Schedule with
        initialValue = amuletConfig_initial
        futureValues = [ (oneYearLater, amuletConfig1) ]

      newSchedule2 = Schedule with
        initialValue = amuletConfig_initial
        futureValues = []

  -- a scheduled item in 1 year gets properly appended to empty futureValues and the old futureValue got pruned
  submitMulti [app.dso] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_AddFutureAmuletConfigSchedule with
      newScheduleItem = (oneYearLater, amuletConfig1)
  Some (_, amuletRules) <- queryAmuletRulesByKey app.dso
  amuletRules.configSchedule === newSchedule1

  -- a removal on an unmatched time does not succeed
  context <- getPaymentTransferContext app alice
  submitMultiMustFail [app.dso] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_RemoveFutureAmuletConfigSchedule with
      scheduleTime = thirteenHoursLater
  Some (_, amuletRules) <- queryAmuletRulesByKey app.dso
  amuletRules.configSchedule === newSchedule1

  -- a removal on a matched time succeeds
  submitMulti [app.dso] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_RemoveFutureAmuletConfigSchedule with
      scheduleTime = oneYearLater
  Some (_, amuletRules) <- queryAmuletRulesByKey app.dso
  amuletRules.configSchedule === newSchedule2

  return ()


testUpdateFutureAmuletConfigSchedule: Script ()
testUpdateFutureAmuletConfigSchedule = do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers
  now <- getTime

  runNextIssuance app
  context <- getPaymentTransferContext app alice

  runNextIssuance app
  let thirteenHoursLater = addRelTime now (hours 13)
      oneYearLater = addRelTime now (days 365)

      amuletConfig_initial = makeAmuletConfig (minutes 10) (RatePerRound 0.00002)
      amuletConfig1 = makeAmuletConfig (seconds 100) (RatePerRound 0.000004)
      amuletConfig2 = makeAmuletConfig (seconds 120) (RatePerRound 0.00012)

      newSchedule1 = Schedule with
        initialValue = amuletConfig_initial
        futureValues = [ (oneYearLater, amuletConfig1) ]

      newSchedule2 = Schedule with
        initialValue = amuletConfig_initial
        futureValues = [ (oneYearLater, amuletConfig2) ]

  -- a scheduled item in 1 year gets properly appended to empty futureValues and the old futureValue got pruned
  submitMulti [app.dso] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_AddFutureAmuletConfigSchedule with
      newScheduleItem = (oneYearLater, amuletConfig1)
  Some (_, amuletRules) <- queryAmuletRulesByKey app.dso
  amuletRules.configSchedule === newSchedule1

  -- an update on an unmatched time does not succeed
  context <- getPaymentTransferContext app alice
  submitMultiMustFail [app.dso] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_UpdateFutureAmuletConfigSchedule with
      scheduleItem = (thirteenHoursLater, amuletConfig1)
  Some (_, amuletRules) <- queryAmuletRulesByKey app.dso
  amuletRules.configSchedule === newSchedule1

  -- an update on a matched time succeeds
  submitMulti [app.dso] [app.dso] $
    exerciseCmd context.amuletRules AmuletRules_UpdateFutureAmuletConfigSchedule with
      scheduleItem = (oneYearLater, amuletConfig2)
  Some (_, amuletRules) <- queryAmuletRulesByKey app.dso
  amuletRules.configSchedule === newSchedule2

  return ()


makeAmuletConfig : RelTime -> RatePerRound -> AmuletConfig USD
makeAmuletConfig tickDuration holdingFee = defaultAmuletConfig with
    transferConfig = defaultTransferConfig with holdingFee
    tickDuration
