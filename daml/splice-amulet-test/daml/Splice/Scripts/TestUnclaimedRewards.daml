-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.Scripts.TestUnclaimedRewards where

import DA.Action (when, void)
import DA.Assert

import Daml.Script

import Splice.Amulet
import Splice.AmuletRules
import Splice.Issuance
import Splice.Round
import Splice.Types
import Splice.ValidatorLicense
import Splice.Scripts.Util
import Splice.Scripts.Parameters

totalRewardsPerRound : Decimal
totalRewardsPerRound = issuanceConfig_0_0p5.amuletToIssuePerYear / (365.0 * 24.0 * 6.0) -- one round every 10'

testUnclaimedRewards_noActivity : Script ()
testUnclaimedRewards_noActivity = do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers

  -- start issuing
  runNextIssuance app
  runAmuletDepositBots app

  -- check size of unclaimed reward issuance
  mergeAndCheckUnclaimedRewardAmount app totalRewardsPerRound


testUnclaimedRewards_withCoupons : Script ()
testUnclaimedRewards_withCoupons = do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers

  -- bare-create all three kinds of rewards
  appCoupon1 <- submitMulti [app.dso, provider1.primaryParty] [] $ createCmd AppRewardCoupon with
    dso = app.dso
    provider = provider1.primaryParty
    amount = 5.7
    round = Round 0
    featured = True

  appCoupon2 <- submitMulti [app.dso, provider1.primaryParty] [] $ createCmd AppRewardCoupon with
    dso = app.dso
    provider = provider1.primaryParty
    amount = 3.3
    round = Round 0
    featured = False

  validatorCoupon1 <- submitMulti [app.dso, alice.primaryParty] [] $ createCmd ValidatorRewardCoupon with
    dso = app.dso
    user = alice.primaryParty
    amount = 2.3
    round = Round 0

  validatorFaucet1 <- submitMulti [app.dso, alice.primaryParty] [] $ createCmd ValidatorFaucetCoupon with
    dso = app.dso
    validator = alice.primaryParty
    round = Round 0

  validatorFaucet2 <- submitMulti [app.dso, provider1Validator.primaryParty] [] $ createCmd ValidatorFaucetCoupon with
    dso = app.dso
    validator = provider1Validator.primaryParty
    round = Round 0

  validatorLivenessActivityRecord1 <- submitMulti [app.dso] [] $ createCmd ValidatorLivenessActivityRecord with
    dso = app.dso
    validator = alice.primaryParty
    round = Round 0

  validatorLivenessActivityRecord2 <- submitMulti [app.dso] [] $ createCmd ValidatorLivenessActivityRecord with
    dso = app.dso
    validator = provider1Validator.primaryParty
    round = Round 0

  svRewardCoupon1 <- submitMulti [app.dso, provider2.primaryParty] [] $ createCmd SvRewardCoupon with
    dso = app.dso
    sv = provider2.primaryParty
    beneficiary = provider2.primaryParty
    round = Round 0
    weight = 10

  -- -- start issuing
  runNextIssuance app
  runAmuletDepositBots app

  [(_, issuing)] <- query @IssuingMiningRound app.dso

  -- check size of unclaimed reward issuance
  let allocatedRewards =
        5.7 * issuanceConfig_0_0p5.featuredAppRewardCap +
        3.3 * issuanceConfig_0_0p5.unfeaturedAppRewardCap +
        2.3 * issuanceConfig_0_0p5.validatorRewardCap +
        2.0 * getValidatorFaucetCap issuanceConfig_0_0p5 +
        2.0 * getValidatorFaucetCap issuanceConfig_0_0p5 +
        10.0 * issuing.issuancePerSvRewardCoupon
  mergeAndCheckUnclaimedRewardAmount app (totalRewardsPerRound - allocatedRewards)

  -- run another two issuances
  runNextIssuance app
  runNextIssuance app

  let numIssuingRoundsToDate = 3.0
  mergeAndCheckUnclaimedRewardAmount app (numIssuingRoundsToDate * totalRewardsPerRound - allocatedRewards)

  -- run another two issuance such that round 0 becomes closed
  runNextIssuance app

  -- collect the reward coupons
  [(closedRoundCid, _)] <- query @ClosedMiningRound app.dso
  let collect = AmuletRules_ClaimExpiredRewards with
        closedRoundCid
        validatorRewardCouponCids = [validatorCoupon1]
        appCouponCids = [appCoupon1, appCoupon2]
        svRewardCouponCids = [svRewardCoupon1]
        optValidatorFaucetCouponCids = Some [validatorFaucet1, validatorFaucet2]
        optValidatorLivenessActivityRecordCids = Some [validatorLivenessActivityRecord1, validatorLivenessActivityRecord2]
  submitExerciseAmuletRulesByKey app [app.dso] [] collect

  -- check that the addition is done correctly
  let numIssuingRoundsToDate = 4.0
  -- note that now the reward coupons have been collected as well, and we thus
  -- don't have to subtract the allocatedRewards anymore. They've been merged back
  -- into the `UnclaimedReward`s fund.
  mergeAndCheckUnclaimedRewardAmount app (numIssuingRoundsToDate * totalRewardsPerRound)
  pure ()

testNoUnclaimedRewards : Script ()
testNoUnclaimedRewards = do
  DefaultAppWithUsers{..} <- setupDefaultAppWithUsers

  -- bare-create enough rewards that there are no unclaimed rewards
  _ <- submitMulti [app.dso, provider1.primaryParty] [] $ createCmd AppRewardCoupon with
    dso = app.dso
    provider = provider1.primaryParty
    amount = 4000.0
    round = Round 0
    featured = True

  _ <- submitMulti [app.dso, provider1.primaryParty] [] $ createCmd AppRewardCoupon with
    dso = app.dso
    provider = provider1.primaryParty
    amount = 1000.0
    round = Round 0
    featured = False

  _ <- submitMulti [app.dso, alice.primaryParty] [] $ createCmd ValidatorRewardCoupon with
    dso = app.dso
    user = alice.primaryParty
    amount = 30000000.0
    round = Round 0

  _ <- submitMulti [app.dso, provider2.primaryParty] [] $ createCmd SvRewardCoupon with
    dso = app.dso
    sv = provider2.primaryParty
    beneficiary = provider2.primaryParty
    round = Round 0
    weight = 15

  -- -- start issuing
  runNextIssuance app
  runAmuletDepositBots app

  unclaimedRewards <- query @UnclaimedReward app.dso
  unclaimedRewards === []
  pure ()

mergeAndCheckUnclaimedRewardAmount : AmuletApp -> Decimal -> Script ()
mergeAndCheckUnclaimedRewardAmount app expectedAmount = do
  mergeUnclaimedRewards app
  -- check target amount
  [(_, unclaimed)] <- query @UnclaimedReward app.dso
  unclaimed === UnclaimedReward with
    dso = app.dso
    amount = expectedAmount


-- | Merge all unclaimed reward contracts.
mergeUnclaimedRewards : AmuletApp -> Script ()
mergeUnclaimedRewards app  = do
  unclaimedRewards <- query @UnclaimedReward app.dso
  when (length unclaimedRewards > 1) $
    void $ submitExerciseAmuletRulesByKey app [app.dso] []
      AmuletRules_MergeUnclaimedRewards with
        unclaimedRewardCids = map fst unclaimedRewards
