-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.AmuletConfig where

import Splice.Fees
import Splice.DecentralizedSynchronizer
import Splice.Issuance
import Splice.Schedule
import DA.Time
import Splice.Util

-- TODO(#14972): Get rid of the unused Amulet data type
data Amulet = Amulet deriving (Show, Eq)
-- ^ Deprecated type for specifying amounts and fees in units of Amulet. Use Splice.Amulet.Amulet directly instead.
data USD = USD deriving (Show, Eq)

-- | Configuration determining the fees and limits for Amulet transfers granted by
-- the AmuletRules.
--
-- See Splice.Scripts.Parameters for concrete values.
data TransferConfig unit = TransferConfig with
    createFee : FixedFee -- ^ Fee to create a new amulet.
    holdingFee : RatePerRound -- ^ Fee for keeping an amulet around.
    transferFee : SteppedRate -- ^ Fee for transferring some amount of amulet to a new owner.
    lockHolderFee : FixedFee -- ^ Fee per lock holder of a locked amulet.
    extraFeaturedAppRewardAmount : Decimal -- ^ Extra $-amount of reward for featured apps.
    maxNumInputs : Int -- ^ Maximum number of batch inputs for a transfer.
    maxNumOutputs : Int -- ^ Maximum number of batch outputs for a transfer.
    maxNumLockHolders : Int -- ^ Maximum number of lock holders allowed for a locked amulet.
  deriving (Eq, Show)

-- | Configuration includes TransferConfig, issuance curve and tickDuration
--
-- See Splice.Scripts.Parameters for concrete values.
data AmuletConfig unit = AmuletConfig with
    transferConfig : TransferConfig unit -- ^ Configuration determining the fees and limits for Amulet transfers
    issuanceCurve : Schedule RelTime IssuanceConfig -- ^ Issuance curve to use.
    decentralizedSynchronizer : AmuletDecentralizedSynchronizerConfig -- ^ Configuration for the decentralized synchronizer and its fees.
    -- TODO(M4-85): the values in here are likely quite large (several URls and long synchronizerIds) and not required for executing transfers. Split this part of the config out into a separate contract as a performance optimization.
    tickDuration : RelTime -- ^ Duration of a tick, which is the duration of half a round.
    packageConfig : PackageConfig
      -- ^ Configuration determining the version of each package
      -- that should be used for command submissions.
    transferPreapprovalFee : Optional Decimal -- ^ Fee for keeping a transfer pre-approval around.
  deriving (Eq, Show)

-- $1/year specified as a daily rate
defaultTransferPreapprovalFee : Decimal
defaultTransferPreapprovalFee = 0.00274

-- Check constraints on config params on which the implementation of the choices rely.
validAmuletConfig : AmuletConfig unit -> Bool
validAmuletConfig AmuletConfig{..} =
    tickDuration > days 0
  && validIssuanceCurve issuanceCurve
  && validAmuletDecentralizedSynchronizerConfig decentralizedSynchronizer

-- | The package config defines for each daml package (identified by name)
-- the package version that should be used for command submissions
-- at that point.
data PackageConfig = PackageConfig
  with
    amulet : Text
    amuletNameService : Text
    dsoGovernance : Text
    validatorLifecycle : Text
    wallet : Text
    walletPayments : Text
  deriving (Show, Eq)

instance Patchable (AmuletConfig USD) where
  patch new base current = AmuletConfig with
    transferConfig = patch new.transferConfig base.transferConfig current.transferConfig
    issuanceCurve = patch new.issuanceCurve base.issuanceCurve current.issuanceCurve
    decentralizedSynchronizer = patch new.decentralizedSynchronizer base.decentralizedSynchronizer current.decentralizedSynchronizer
    tickDuration = patch new.tickDuration base.tickDuration current.tickDuration
    packageConfig = patch new.packageConfig base.packageConfig current.packageConfig
    transferPreapprovalFee = patch new.transferPreapprovalFee base.transferPreapprovalFee current.transferPreapprovalFee

instance Patchable (TransferConfig USD) where
  patch new base current = TransferConfig with
    createFee = patch new.createFee base.createFee current.createFee
    holdingFee = patch new.holdingFee base.holdingFee current.holdingFee
    transferFee = patch new.transferFee base.transferFee current.transferFee
    lockHolderFee = patch new.lockHolderFee base.lockHolderFee current.lockHolderFee
    extraFeaturedAppRewardAmount = patch new.extraFeaturedAppRewardAmount base.extraFeaturedAppRewardAmount current.extraFeaturedAppRewardAmount
    maxNumInputs = patch new.maxNumInputs base.maxNumInputs current.maxNumInputs
    maxNumOutputs = patch new.maxNumOutputs base.maxNumOutputs current.maxNumOutputs
    maxNumLockHolders = patch new.maxNumLockHolders base.maxNumLockHolders current.maxNumLockHolders

instance Patchable PackageConfig where
  patch new base current = PackageConfig with
    amulet = patch new.amulet base.amulet current.amulet
    amuletNameService = patch new.amuletNameService base.amuletNameService current.amuletNameService
    dsoGovernance = patch new.dsoGovernance base.dsoGovernance current.dsoGovernance
    validatorLifecycle = patch new.validatorLifecycle base.validatorLifecycle current.validatorLifecycle
    wallet = patch new.wallet base.wallet current.wallet
    walletPayments = patch new.walletPayments base.walletPayments current.walletPayments
