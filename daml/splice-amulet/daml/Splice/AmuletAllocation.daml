-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.AmuletAllocation (
  AmuletAllocation(..),
  allocationToTwoStepTransfer,
) where

import DA.Text as Text

import Splice.Api.Token.MetadataV1
import Splice.Api.Token.AllocationV1

import Splice.Amulet
import Splice.Amulet.TwoStepTransfer


-- | Amulet allocated in locked form to a trade.
template AmuletAllocation
  with
    lockedAmulet : ContractId LockedAmulet -- ^ Locked amulet that holds the funds for the allocation
    allocation : AllocationView
  where
    signatory allocationInstrumentAdmin allocation, allocation.transferLeg.sender
    observer allocation.settlement.executor

    interface instance Allocation for AmuletAllocation where
      view = allocation

      allocation_withdrawImpl _self Allocation_Withdraw{..} = unlockAmuletAllocation this extraArgs
      allocation_cancelImpl _self Allocation_Cancel{..} = unlockAmuletAllocation this extraArgs
      allocation_executeTransferImpl _self Allocation_ExecuteTransfer{..} = transferAmuletAllocation this extraArgs

allocationInstrumentAdmin : AllocationView -> Party
allocationInstrumentAdmin AllocationView{..} = transferLeg.instrumentId.admin


-- Allocation usage
-------------------

allocationToTwoStepTransfer : AllocationView -> TwoStepTransfer
allocationToTwoStepTransfer allocation =
  TwoStepTransfer with
    dso = allocationInstrumentAdmin allocation
    sender = allocation.transferLeg.sender
    receiver = allocation.transferLeg.receiver
    amount = allocation.transferLeg.amount
    provider = allocation.settlement.executor
    -- TODO(#18632): consider whether we should use the time of request for the allocation instead of the time of the when the settlement was requested
    requestedAt = allocation.settlement.requestedAt
    transferBefore = allocation.settlement.settleBefore
    transferBeforeDeadline = "AllocationView.settlement.settleBefore"
    allowFeaturing = True -- TODO(#18638): allow the executor to specify beneficiaries
    lockContext = Text.implode
      -- We don't show more context to avoid bloating the response here.
      -- TODO(#18680): enable Wallets to display additional info by correlating the full allocation to the locked holding via the `holdingCids` field in the `Allocation`.
      ["allocation for transfer leg ", show allocation.transferLegId, " to ", show allocation.transferLeg.receiver]

transferAmuletAllocation : AmuletAllocation -> ExtraArgs -> Update Allocation_ExecuteTransferResult
transferAmuletAllocation amuletAllocation extraArgs = do
  let twoStepTransfer = allocationToTwoStepTransfer amuletAllocation.allocation
  (senderHoldingCids, receiverHoldingCids) <-
    executeTwoStepTransfer twoStepTransfer amuletAllocation.lockedAmulet extraArgs
  pure Allocation_ExecuteTransferResult
    with
      holdings = AllocationResultHoldings
        with
          senderHoldingCids
          receiverHoldingCids
      meta = emptyMetadata

unlockAmuletAllocation : AmuletAllocation -> ExtraArgs -> Update ChoiceExecutionMetadata
unlockAmuletAllocation AmuletAllocation{..} extraArgs = do
  let twoStepTransfer = allocationToTwoStepTransfer allocation
  _senderHoldingCid <- abortTwoStepTransfer twoStepTransfer lockedAmulet extraArgs
  -- TODO(#18632): also return the sender holding here
  pure ChoiceExecutionMetadata with meta = emptyMetadata
