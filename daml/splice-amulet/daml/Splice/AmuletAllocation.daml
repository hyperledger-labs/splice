-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.AmuletAllocation (
  AmuletAllocation(..),
  allocationToTwoStepTransfer,
) where

import DA.Text as Text

import Splice.Api.Token.MetadataV1
import Splice.Api.Token.HoldingV1
import Splice.Api.Token.AllocationV1

import Splice.Amulet
import Splice.Amulet.TwoStepTransfer


-- | Amulet allocated in locked form to a trade.
template AmuletAllocation
  with
    lockedAmulet : ContractId LockedAmulet -- ^ Locked amulet that holds the funds for the allocation
    allocation : AllocationSpecification
  where
    signatory allocationInstrumentAdmin allocation, allocation.transferLeg.sender
    observer allocation.settlement.executor

    interface instance Allocation for AmuletAllocation where
      view = AllocationView with
        allocation
        holdingCids = [toInterfaceContractId lockedAmulet]
        meta = emptyMetadata

      allocation_executeTransferImpl _self Allocation_ExecuteTransfer{..} = transferAmuletAllocation this extraArgs

      allocation_withdrawImpl _self Allocation_Withdraw{..} = do
        senderHoldingCids <- unlockAmuletAllocation this extraArgs
        pure Allocation_WithdrawResult
          with
            senderHoldingCids
            meta = emptyMetadata

      allocation_cancelImpl _self Allocation_Cancel{..} = do
        senderHoldingCids <- unlockAmuletAllocation this extraArgs
        pure Allocation_CancelResult
          with
            senderHoldingCids
            meta = emptyMetadata

allocationInstrumentAdmin : AllocationSpecification -> Party
allocationInstrumentAdmin AllocationSpecification{..} = transferLeg.instrumentId.admin


-- Allocation usage
-------------------

allocationToTwoStepTransfer : AllocationSpecification -> TwoStepTransfer
allocationToTwoStepTransfer allocation =
  TwoStepTransfer with
    dso = allocationInstrumentAdmin allocation
    sender = allocation.transferLeg.sender
    receiver = allocation.transferLeg.receiver
    amount = allocation.transferLeg.amount
    provider = allocation.settlement.executor
    transferBefore = allocation.settlement.settleBefore
    transferBeforeDeadline = "allocation.settlement.settleBefore"
    allowFeaturing = True
    lockContext = Text.implode
      -- We don't show more context to avoid bloating the response here.
      ["allocation for transfer leg ", show allocation.transferLegId, " to ", show allocation.transferLeg.receiver]

transferAmuletAllocation : AmuletAllocation -> ExtraArgs -> Update Allocation_ExecuteTransferResult
transferAmuletAllocation amuletAllocation extraArgs = do
  let twoStepTransfer = allocationToTwoStepTransfer amuletAllocation.allocation
  (senderHoldingCids, receiverHoldingCids, meta) <-
    executeTwoStepTransfer twoStepTransfer amuletAllocation.lockedAmulet extraArgs
  pure Allocation_ExecuteTransferResult
    with
      senderHoldingCids
      receiverHoldingCids
      meta

unlockAmuletAllocation : AmuletAllocation -> ExtraArgs -> Update [ContractId Holding]
unlockAmuletAllocation amuletAllocation extraArgs = do
  let twoStepTransfer = allocationToTwoStepTransfer amuletAllocation.allocation
  abortTwoStepTransfer twoStepTransfer amuletAllocation.lockedAmulet extraArgs
