-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.Scripts.TestValidatorLicenseWeight where

import DA.Assert
import Daml.Script

import Splice.Amulet
import Splice.DsoRules
import Splice.ValidatorLicense

import Splice.Scripts.Util
import Splice.Scripts.DsoTestUtils
import Splice.Util

-- Test multiple validator license weight changes in a single vote
testValidatorLicenseWeightChangeBatch : Script ()
testValidatorLicenseWeightChangeBatch = do
  (app, dso, (sv1, sv2, sv3, sv4)) <- initDevNet

  validator1 <- setupValidator app "validator1"
  validator2 <- setupValidator app "validator2"
  validator3 <- setupValidator app "validator3"

  [(dsoRulesCid, _)] <- query @DsoRules dso

  -- Verify all validators have default weight (None)
  [(_, license1)] <- query @ValidatorLicense validator1
  [(_, license2)] <- query @ValidatorLicense validator2
  [(_, license3)] <- query @ValidatorLicense validator3
  license1.weight === None
  license2.weight === None
  license3.weight === None

  -- Change weights for all three validators in a single vote
  initiateAndAcceptVote app [sv1, sv2, sv3, sv4] (ARC_DsoRules (SRARC_ValidatorLicense_ChangeWeight
    (DsoRules_ValidatorLicense_ChangeWeight with
      updates = [ValidatorWeightUpdate validator1 5.0
               , ValidatorWeightUpdate validator2 10.0
               , ValidatorWeightUpdate validator3 15.0])))

  -- Verify three instruction contracts were created
  instructions <- query @ValidatorLicense_Instruction dso
  length instructions === 3

  -- Execute all three instructions
  [(license1Cid, _)] <- query @ValidatorLicense validator1
  [(license2Cid, _)] <- query @ValidatorLicense validator2
  [(license3Cid, _)] <- query @ValidatorLicense validator3

  [(instruction1Cid, instruction1)] <- queryFilter @ValidatorLicense_Instruction dso (\i -> i.validator == validator1)
  [(instruction2Cid, instruction2)] <- queryFilter @ValidatorLicense_Instruction dso (\i -> i.validator == validator2)
  [(instruction3Cid, instruction3)] <- queryFilter @ValidatorLicense_Instruction dso (\i -> i.validator == validator3)

  submitMulti [sv1] [dso] $ exerciseCmd dsoRulesCid DsoRules_Execute_ValidatorLicense_Instruction with
    sv = sv1
    validatorLicenseCid = license1Cid
    instructionCid = instruction1Cid

  submitMulti [sv1] [dso] $ exerciseCmd dsoRulesCid DsoRules_Execute_ValidatorLicense_Instruction with
    sv = sv1
    validatorLicenseCid = license2Cid
    instructionCid = instruction2Cid

  submitMulti [sv1] [dso] $ exerciseCmd dsoRulesCid DsoRules_Execute_ValidatorLicense_Instruction with
    sv = sv1
    validatorLicenseCid = license3Cid
    instructionCid = instruction3Cid

  -- Verify all weights are updated correctly
  [(_, license1)] <- query @ValidatorLicense validator1
  [(_, license2)] <- query @ValidatorLicense validator2
  [(_, license3)] <- query @ValidatorLicense validator3
  license1.weight === Some 5.0
  license2.weight === Some 10.0
  license3.weight === Some 15.0

  pure ()

-- Test multiple validator license withdrawals in a single vote
testValidatorLicenseWithdrawBatch : Script ()
testValidatorLicenseWithdrawBatch = do
  (app, dso, (sv1, sv2, sv3, sv4)) <- initDevNet

  validator1 <- setupValidator app "validator1"
  validator2 <- setupValidator app "validator2"
  validator3 <- setupValidator app "validator3"

  [(dsoRulesCid, _)] <- query @DsoRules dso

  -- Verify all validator licenses exist
  [(license1Cid, _)] <- query @ValidatorLicense validator1
  [(license2Cid, _)] <- query @ValidatorLicense validator2
  [(license3Cid, _)] <- query @ValidatorLicense validator3

  -- Withdraw all three validator licenses in a single vote
  initiateAndAcceptVote app [sv1, sv2, sv3, sv4] (ARC_DsoRules (SRARC_ValidatorLicense_Withdraw
    (DsoRules_ValidatorLicense_Withdraw with validators = [validator1, validator2, validator3])))

  -- Verify three instruction contracts were created
  instructions <- query @ValidatorLicense_Instruction dso
  length instructions === 3

  -- Execute all three instructions
  [(instruction1Cid, instruction1)] <- queryFilter @ValidatorLicense_Instruction dso (\i -> i.validator == validator1)
  [(instruction2Cid, instruction2)] <- queryFilter @ValidatorLicense_Instruction dso (\i -> i.validator == validator2)
  [(instruction3Cid, instruction3)] <- queryFilter @ValidatorLicense_Instruction dso (\i -> i.validator == validator3)

  [(license1Cid, _)] <- query @ValidatorLicense validator1
  [(license2Cid, _)] <- query @ValidatorLicense validator2
  [(license3Cid, _)] <- query @ValidatorLicense validator3

  submitMulti [sv1] [dso] $ exerciseCmd dsoRulesCid DsoRules_Execute_ValidatorLicense_Instruction with
    sv = sv1
    validatorLicenseCid = license1Cid
    instructionCid = instruction1Cid

  submitMulti [sv1] [dso] $ exerciseCmd dsoRulesCid DsoRules_Execute_ValidatorLicense_Instruction with
    sv = sv1
    validatorLicenseCid = license2Cid
    instructionCid = instruction2Cid

  submitMulti [sv1] [dso] $ exerciseCmd dsoRulesCid DsoRules_Execute_ValidatorLicense_Instruction with
    sv = sv1
    validatorLicenseCid = license3Cid
    instructionCid = instruction3Cid

  -- Verify all validator licenses are withdrawn
  [] <- query @ValidatorLicense validator1
  [] <- query @ValidatorLicense validator2
  [] <- query @ValidatorLicense validator3

  pure ()


-- Test validator license weight change does affect the rewards
testValidatorLicenseWeightChange : Script ()
testValidatorLicenseWeightChange = do
  (app, dso, (sv1, sv2, sv3, sv4)) <- initDevNet

  validator <- setupValidator app "validator"

  let checkActivityRecordsDoNotExist round = do
        [] <- queryFilter @ValidatorLivenessActivityRecord dso (\co -> co.round == round)
        pure ()

  let checkValidatorBalanceInRange lower upper = do
        [(_, amulet)] <- query @Amulet validator
        require ("validator balance " <> show amulet.amount.initialAmount <> " should be >= " <> show lower) (amulet.amount.initialAmount >= lower)
        require ("validator balance " <> show amulet.amount.initialAmount <> " should be < " <> show upper) (amulet.amount.initialAmount < upper)

  let changeWeightAndVerify newWeight = do
        [(dsoRulesCid, _)] <- query @DsoRules dso
        [(validatorLicenseCid, _)] <- query @ValidatorLicense validator
        initiateAndAcceptVote app [sv1, sv2, sv3, sv4] (ARC_DsoRules (SRARC_ValidatorLicense_ChangeWeight (DsoRules_ValidatorLicense_ChangeWeight with updates = [ValidatorWeightUpdate validator newWeight])))
        [(instructionCid, _)] <- query @ValidatorLicense_Instruction dso
        submitMulti [sv1] [dso] $ exerciseCmd dsoRulesCid DsoRules_Execute_ValidatorLicense_Instruction with
          sv = sv1
          validatorLicenseCid
          instructionCid
        [(_, license)] <- query @ValidatorLicense validator
        license.weight === Some newWeight

  let recordActivityAndRunIssuance expectedWeight = do
        [(validatorLicenseCid, _)] <- query @ValidatorLicense validator
        (openRoundCid, openRound) <- getLatestOpenRound app

        submitMulti [validator] [dso] $ exerciseCmd validatorLicenseCid ValidatorLicense_RecordValidatorLivenessActivity with openRoundCid

        [(_, record)] <- query @ValidatorLivenessActivityRecord validator
        record.weight === expectedWeight

        -- Process 3 rounds of issuance
        runNextIssuance app
        runNextIssuance app
        runNextIssuance app
        runAmuletDepositBots app

        checkActivityRecordsDoNotExist openRound.round

  [(_, amulet)] <- query @Amulet validator
  amulet.amount.initialAmount === 1.0

  -- Using default weight of None gives about 2.85 Amulets
  recordActivityAndRunIssuance None
  checkValidatorBalanceInRange 3.7 3.9  -- 1.0 initial + ~2.85

  -- Change weight to 10.0 and verify rewards with 10x multiplier
  changeWeightAndVerify 10.0
  recordActivityAndRunIssuance (Some 10.0)
  checkValidatorBalanceInRange 30.0 35.0  -- 1.0 initial + ~2.85 + ~28.5

  -- Change weight to 0.0 and verify no new rewards get issued on recording activity
  changeWeightAndVerify 0.0
  recordActivityAndRunIssuance (Some 0.0)
  checkValidatorBalanceInRange 30.0 35.0

  pure ()
