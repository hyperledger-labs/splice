-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.Scripts.TestFeaturedAppActivityMarkers where

import DA.Assert
import DA.Foldable (forA_)
import Daml.Script

import Splice.Amulet
import Splice.AmuletRules
import Splice.DsoRules
import qualified Splice.Api.FeaturedAppRightV1
import Splice.Api.FeaturedAppRightV1 (FeaturedAppRight_CreateActivityMarkerResult(..))

import Splice.Scripts.Util
import Splice.Scripts.DsoTestUtils
import Splice.Testing.Registries.AmuletRegistry.Parameters (defaultFeaturedAppActivityMarkerAmount)

testFeaturedAppActivityMarkers : Script ()
testFeaturedAppActivityMarkers = do
  -- Change the price to make sure that scaling works properly
  let amuletPrice = 0.5
  (app, dso, (sv1, sv2, sv3, _)) <- initMainNetWithAmuletPrice amuletPrice
  provider1 <- allocateParty "provider1"
  provider2 <- allocateParty "provider2"
  beneficiary <- allocateParty "beneficiary"
  -- runAmuletDepositBots relies on ValidatorRight contracts so we create it here
  forA_ [provider1, provider2, beneficiary] $ \user -> submit user $ createCmd ValidatorRight with
    dso
    user
    validator = user

  -- setup featured app right for provider party
  [(dsoRulesCid, _)] <- query @DsoRules dso

  [(amuletRulesCid, _)] <- query @AmuletRules dso

  forA_ [provider1, provider2] $ \provider -> do
    let action = ARC_DsoRules with
          dsoAction = SRARC_GrantFeaturedAppRight $ DsoRules_GrantFeaturedAppRight with
            provider

    confirmationCids <- forA [sv1, sv2, sv3] $ \svParty -> do
      result <- submitMulti [svParty] [dso] $ exerciseCmd dsoRulesCid DsoRules_ConfirmAction with
        confirmer = svParty
        action
      return result.confirmation

    confirmations <- query @Confirmation dso
    length confirmations === 3

    submitMulti [sv1] [dso] $ exerciseCmd dsoRulesCid
      DsoRules_ExecuteConfirmedAction with
        action
        amuletRulesCid = None
        confirmationCids
        sv = Some sv1

  [(featuredAppRightCid1, _)] <- queryInterface @Splice.Api.FeaturedAppRightV1.FeaturedAppRight provider1
  [(featuredAppRightCid2, _)] <- queryInterface @Splice.Api.FeaturedAppRightV1.FeaturedAppRight provider2

  -- Fails if weights do not add up to 1.0
  submitMustFail provider1 $ exerciseCmd featuredAppRightCid1 Splice.Api.FeaturedAppRightV1.FeaturedAppRight_CreateActivityMarker
    with
      beneficiaries = [Splice.Api.FeaturedAppRightV1.AppRewardBeneficiary provider1 0.3]

  -- Fails if length beneficiaries > 20
  submitMustFail provider1 $ exerciseCmd featuredAppRightCid1 Splice.Api.FeaturedAppRightV1.FeaturedAppRight_CreateActivityMarker
    with
      beneficiaries = Splice.Api.FeaturedAppRightV1.AppRewardBeneficiary provider1 0.8 :: replicate 20 (Splice.Api.FeaturedAppRightV1.AppRewardBeneficiary provider1 0.01)

  FeaturedAppRight_CreateActivityMarkerResult [marker1Iface, marker2Iface] <- submit provider1 $ exerciseCmd featuredAppRightCid1 Splice.Api.FeaturedAppRightV1.FeaturedAppRight_CreateActivityMarker
    with
      beneficiaries = [Splice.Api.FeaturedAppRightV1.AppRewardBeneficiary provider1 0.3, Splice.Api.FeaturedAppRightV1.AppRewardBeneficiary beneficiary 0.6, Splice.Api.FeaturedAppRightV1.AppRewardBeneficiary beneficiary 0.1]
  FeaturedAppRight_CreateActivityMarkerResult [marker3Iface] <- submit provider1 $ exerciseCmd featuredAppRightCid1 Splice.Api.FeaturedAppRightV1.FeaturedAppRight_CreateActivityMarker
    with
      beneficiaries = [Splice.Api.FeaturedAppRightV1.AppRewardBeneficiary provider1 1.0]
  FeaturedAppRight_CreateActivityMarkerResult [marker4Iface] <- submit provider2 $ exerciseCmd featuredAppRightCid2 Splice.Api.FeaturedAppRightV1.FeaturedAppRight_CreateActivityMarker
    with
      beneficiaries = [Splice.Api.FeaturedAppRightV1.AppRewardBeneficiary provider2 1.0]

  let [marker1, marker2, marker3, marker4] = map fromInterfaceContractId [marker1Iface, marker2Iface, marker3Iface, marker4Iface]

  (openMiningRoundCid, openMiningRound) <- getLatestOpenRound app

  DsoRules_AmuletRules_ConvertFeaturedAppActivityMarkersResult (AmuletRules_ConvertFeaturedAppActivityMarkersResult couponCids) <- submitMulti [sv1] [dso] $ exerciseCmd dsoRulesCid DsoRules_AmuletRules_ConvertFeaturedAppActivityMarkers with
    amuletRulesCid
    argument = AmuletRules_ConvertFeaturedAppActivityMarkers with
      markerCids = [marker1, marker3, marker2, marker4] -- interleave different providers to test grouping
      openMiningRoundCid
    sv = Some sv1

  -- markers are archived
  [None, None, None, None] <- mapA (queryContractId @FeaturedAppActivityMarker dso) [marker1, marker2, marker3, marker4]

  [Some coupon1, Some coupon2, Some coupon3] <- mapA (queryContractId @AppRewardCoupon dso) couponCids
  coupon1 === AppRewardCoupon with
      dso
      provider = provider1
      beneficiary = Some beneficiary
      featured = True
      round = openMiningRound.round
      amount = 0.7 * defaultFeaturedAppActivityMarkerAmount / amuletPrice
  coupon2 === AppRewardCoupon with
      dso
      provider = provider1
      beneficiary = Some provider1
      featured = True
      round = openMiningRound.round
      amount = 1.3 * defaultFeaturedAppActivityMarkerAmount / amuletPrice
  coupon3  === AppRewardCoupon with
      dso
      provider = provider2
      beneficiary = Some provider2
      featured = True
      round = openMiningRound.round
      amount = defaultFeaturedAppActivityMarkerAmount / amuletPrice

  -- ensure that the round is in issuing phase
  runNextIssuanceD app amuletPrice
  runNextIssuanceD app amuletPrice
  -- advance until the opensAt
  advanceToNextRoundChange app
  -- Check that coupons are archived, we don't check the detailed minting computations
  -- as these are identical to any other app reward coupons.
  runAmuletDepositBots app
  forA_ couponCids $ \couponCid -> do
    None <- queryContractId dso couponCid
    pure ()
  pure ()

testFeaturedAppActivityMarkersConfigDisabled : Script ()
testFeaturedAppActivityMarkersConfigDisabled = do
  DefaultAppWithUsers{app, alice} <- setupDefaultAppWithUsers
  featuredAppRightCid <- featureApp app alice
  FeaturedAppRight_CreateActivityMarkerResult [markerIface] <- submit alice.primaryParty $ exerciseCmd (toInterfaceContractId @Splice.Api.FeaturedAppRightV1.FeaturedAppRight featuredAppRightCid) Splice.Api.FeaturedAppRightV1.FeaturedAppRight_CreateActivityMarker
    with
      beneficiaries = [Splice.Api.FeaturedAppRightV1.AppRewardBeneficiary alice.primaryParty 1.0]

  [(amuletRulesCid, amuletRules)] <- query @AmuletRules app.dso

  submit app.dso $
    archiveCmd amuletRulesCid
  amuletRulesCid <- submit app.dso $
    createCmd amuletRules with
      configSchedule.initialValue.featuredAppActivityMarkerAmount = None

  (openMiningRoundCid, _) <- getLatestOpenRound app

  AmuletRules_ConvertFeaturedAppActivityMarkersResult couponCids <- submit app.dso $ exerciseCmd amuletRulesCid AmuletRules_ConvertFeaturedAppActivityMarkers with
      markerCids = [fromInterfaceContractId markerIface]
      openMiningRoundCid
  couponCids === []
  None <- queryInterfaceContractId app.dso markerIface

  submit app.dso $
    archiveCmd amuletRulesCid
  amuletRulesCid <- submit app.dso $
    createCmd amuletRules with
      configSchedule.initialValue.featuredAppActivityMarkerAmount = Some 0.0

  FeaturedAppRight_CreateActivityMarkerResult [markerIface] <- submit alice.primaryParty $ exerciseCmd (toInterfaceContractId @Splice.Api.FeaturedAppRightV1.FeaturedAppRight featuredAppRightCid) Splice.Api.FeaturedAppRightV1.FeaturedAppRight_CreateActivityMarker
    with
      beneficiaries = [Splice.Api.FeaturedAppRightV1.AppRewardBeneficiary alice.primaryParty 1.0]

  AmuletRules_ConvertFeaturedAppActivityMarkersResult couponCids <- submit app.dso $ exerciseCmd amuletRulesCid AmuletRules_ConvertFeaturedAppActivityMarkers with
      markerCids = [fromInterfaceContractId markerIface]
      openMiningRoundCid
  couponCids === []
  None <- queryInterfaceContractId app.dso markerIface

  pure ()
