-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | Utility functions shared across all splice apps.
module Splice.Util
( require,

  requireMatchingContract,

  HasCheckedFetch(..),
  fetchAndArchive,
  fetchReferenceData,
  fetchPublicReferenceData,
  fetchButArchiveLater,

  fetchUncheckedAndArchive,
  fetchUncheckedReferenceData,
  fetchUncheckedButArchiveLater,

  potentiallyUnsafeArchive,

  patchListAsScalar,
  patchListAsSet,
) where

import DA.Action (unless)
import DA.Time
import DA.Set (Set, difference, union)
import qualified DA.Set as Set
import DA.Map (Map)
import qualified DA.Map as Map
import DA.List()

-- | Require that a contract-id refers to a specific contract.
requireMatchingContract : (Eq t, Show t, HasFetch t) => ContractId t -> t -> Update ()
requireMatchingContract cid expectedCo = do
  co <- fetch cid
  unless (co == expectedCo) $ fail $
    "Contract mismatch: expected " <> show expectedCo <>
    ", got " <> show co <> " referenced by " <> show cid

-- | Check whether a required condition is true. If it's not, abort the
-- transaction with a message saying that the requirement was not met.
require : CanAssert m => Text -> Bool -> m ()
require msg invariant =
  assertMsg ("The requirement '" <> msg <> "' was not met.") invariant

-- | Contracts typically come in groups. For example, all contracts managed by a specific DSO party.
--
-- We aim to always fetch with a specific contract group identifier to ensure that we do not mixup
-- contracts from different groups.
class (HasFetch t, Show t, Eq cgid, Show cgid) => HasCheckedFetch t cgid where
  contractGroupId : t -> cgid

-- | Fetch a contract that is part of a specific contract group.
--
-- The group is typically chosen by the caller to match its own group, or a more specific group.
fetchChecked : HasCheckedFetch t cgid => cgid -> ContractId t -> Update t
fetchChecked expectedcgid cid = do
  co <- fetch cid
  checkContractGroupId expectedcgid cid co

-- | Fetch and archive a contract in one go.
--
-- Use this when implementing choices that mutate another contract by
-- fetching, archiving, and then creating the updated contract.
fetchAndArchive : (HasCheckedFetch t cgid, HasArchive t) => cgid -> ContractId t -> Update t
fetchAndArchive cgid cid = do
  co <- fetchChecked cgid cid
  archive cid
  return co

-- | Fetch a contract that serves as reference data.
--
-- Use this whenever you need to fetch a contract that you do not intend to mutate.
fetchReferenceData : HasCheckedFetch t cgid => cgid -> ContractId t -> Update t
fetchReferenceData = fetchChecked

-- | Fetch a contract that is not reference data, and should be archived later in some cases.
--
-- Prefer `fetchAndArchive` over this function, as it avoids forgetting to archive the contract.
fetchButArchiveLater : HasCheckedFetch t cgid => cgid -> ContractId t -> Update t
fetchButArchiveLater = fetchChecked


-- | Fetch a contract that offers a choice anybody to be read as reference data.
fetchPublicReferenceData : (HasCheckedFetch t cgid, HasExercise t ch t) => cgid -> ContractId t -> ch -> Update t
fetchPublicReferenceData expectedCgid cid arg = do
  co <- exercise cid arg
  checkContractGroupId expectedCgid cid co


-- Unchecked variants of the above functions
-- Avoid these whenever possible! Actually, we should not need these at all.

-- TODO(#9465): remove their use in ANS
-- TODO(#9464): remove their use in Splitwell and drop them completely

-- | Fetch and archive a contract in one go.
--
-- Use this when implementing choices that mutate another contract by
-- fetching, archiving, and then creating the updated contract.
fetchUncheckedAndArchive : (HasFetch b, HasArchive b) => ContractId b -> Update b
fetchUncheckedAndArchive cid = do
  co <- fetch cid
  archive cid
  return co

-- | Fetch a contract that serves as reference data.
--
-- Use this whenever you need to fetch a contract that you do not intend to mutate.
fetchUncheckedReferenceData : HasFetch t => ContractId t -> Update t
fetchUncheckedReferenceData = fetch

-- | Fetch a contract that is not reference data, and should be archived later in some cases.
--
-- Prefer `fetchAndArchive` over this function, as it avoids forgetting to archive the contract.
fetchUncheckedButArchiveLater : HasFetch t => ContractId t -> Update t
fetchUncheckedButArchiveLater = fetch

-- | A more appropriately named version of `archive`.
--
-- Please justify all its uses, and where possible prefer `fetchAndArchive`
-- so that the contract group identifier is surely performed.
potentiallyUnsafeArchive : HasArchive t => ContractId t -> Update ()
potentiallyUnsafeArchive = archive


-- Internal functions
---------------------

checkContractGroupId : HasCheckedFetch t cgid => cgid -> ContractId t -> t -> Update t
checkContractGroupId expectedcgid cid co = do
  let cgid = contractGroupId co
  unless (expectedcgid == cgid) $ fail $
    "Contract group identifier mismatch: expected " <> show expectedcgid <>
    ", got " <> show cgid <> " for " <> show (cid, co)
  return co


-- Patching config values
-------------------------

-- | A type class for patching values. Used in particular for changing only a subset of
-- fields in a config value.
class Patchable a where
  -- | For records, `patch new base current` should set all fields in `current` to their value in `new` iff their value was changed
  -- in `new` compared to `base`. For other kinds of values that have field-like values
  -- (e.g. Maps with keys) the implementation should match the one for records
  -- by analogy.
  patch : a -> a -> a -> a

patchScalar : Eq a => a -> a -> a -> a
patchScalar new base current
  | new == base = current
  | otherwise = new

patchListAsScalar : Eq a => [a] -> [a] -> [a] -> [a]
patchListAsScalar new base current = patchScalar new base current

patchListAsSet : (Patchable a, Ord a) => [a] -> [a] -> [a] -> [a]
patchListAsSet new base current = Set.toList (patch (Set.fromList new) (Set.fromList base) (Set.fromList current))

instance (Patchable a, Ord a) => Patchable (Set a) where
  patch new base current =
    let toAdd = difference new base
        toRemove = difference base new
    in union (difference current toRemove) toAdd

instance Patchable Decimal where
  patch = patchScalar

instance Patchable Int where
  patch = patchScalar

instance Patchable Text where
  patch = patchScalar

instance Patchable RelTime where
  patch = patchScalar

instance Patchable Time where
  patch = patchScalar

mapDifference : Ord k => Map k a -> Map k a -> Map k k
mapDifference = Map.merge (\_ _ -> None) (\k _ -> Some k) (\_ _ _ -> None)

instance (Ord k, Patchable v) => Patchable (Map k v) where
  patch new base current =
      Map.union toAdd (Map.filterWithKey (\key _ -> not (Map.member key keysToRemove)) current)
    where
      toAdd = Map.merge
        -- Keys only in `new`: Add them to the result
        (\_ value -> Some value)
        -- Keys only in `base`: Remove them from the result (i.e., return `None`)
        (\_key _ -> None)
        -- Keys in both `new` and `base`: Use `patch` to merge with `base`
        (\key newValue baseValue ->
          case Map.lookup key current of
            None -> None  -- Value got removed by concurrent request
            Some currentValue -> Some (patch newValue baseValue currentValue)
        )
        new
        base
      keysToRemove = mapDifference new base

instance Patchable a => Patchable (Optional a) where
  patch new base current =
    case (base, new) of
      (None, None) -> current  -- No change requested
      (Some _, None) -> None   -- Remove the value
      (None, Some new') -> Some new' -- Write the complete new value
      (Some base', Some new') ->
        case current of
          None -> None  -- Value got removed by concurrent request
          Some current' -> Some (patch new' base' current') -- Patch the current value
