-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | Templates and code for the SVs to agree on a amulet price using median-based voting.
--
-- Every sv can change its desired amulet price at any time they like provided they
-- wait at least one tick duration (2.5 minutes by default) between changes.
--
-- New `OpenMiningRounds` are always openened with the median of the amulet prices voted for
-- by the SVs.
module Splice.DSO.AmuletPrice where

import DA.List
import DA.Optional

import Splice.Util

import Splice.Types


-- | A vote by an SV for their desired amulet price.
template AmuletPriceVote with
    dso : Party
    sv : Party
    amuletPrice : Optional Decimal
      -- ^ Set to None for new svs, but defined thereafter.
    lastUpdatedAt : Time
      -- ^ The last time this price was updated. Tracked to limit svs from
      -- changing their vote more than once per tick.
  where
    ensure optional True (0.0 <) amuletPrice

    signatory dso

fetchMedianAmuletPrice : Party -> [Party] -> [ContractId AmuletPriceVote] -> Update Decimal
fetchMedianAmuletPrice dso svs voteCids = do
  votes <- forA voteCids $ \voteCid -> do
    fetchReferenceData (ForDso with dso) voteCid
  let voters = map (.sv) votes
  require "Every sv voted exactly once" (sort voters == sort svs)
  pure $ median $ mapOptional (.amuletPrice) votes

-- | See https://en.wikipedia.org/wiki/Median
median : [Decimal] -> Decimal
median [] = error "median: not defined for the empty list"
median xs0 =
    0.5 * (xs !! ((n - 1) / 2) + xs !! (n / 2))
  where
    xs = sort xs0
    n = length xs


-- instances
------------

instance HasCheckedFetch AmuletPriceVote ForDso where
  contractGroupId AmuletPriceVote {..} = ForDso with dso

instance HasCheckedFetch AmuletPriceVote ForOwner where
  contractGroupId AmuletPriceVote {..} = ForOwner with dso; owner = sv
