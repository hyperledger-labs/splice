-- Copyright (c) 2024 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

module Splice.Wallet.Subscriptions where

import DA.Time
import DA.List (dedupSort)

import Splice.Amulet
import Splice.AmuletRules
import Splice.Expiry
import Splice.Types
import Splice.Round
import Splice.Wallet.Payment
import Splice.Util

-- Subscriptions flow (happy path) for reference;
-- solid arrows represent state transitions via exercising a choice,
-- dashed arrows represent a "references" relationship:
--
--       ┌─────────────────────┐
--       │ SubscriptionRequest │
--       └──────────┬──────────┘
--                  │AcceptAndMakePayment (sender)
--                  │
--    ┌─────────────▼──────────────┐
--    │ SubscriptionInitialPayment │
--    └─────────────┬──────────────┘
--                  │Collect (receiver)
--                  ├────────────────────────────────────┐
--                  │                                    │
--                  │                                    │
--    ┌─────────────▼──────────────┐             ┌───────▼────────┐
--    │   SubscriptionIdleState    │------------>│  Subscription  │
--    └┬──────────────────────▲────┘             └────────────────┘
--     │MakePayment (sender)  │                          ^
--     │                      │Collect (receiver)        '
--    ┌▼──────────────────────┴────┐                     '
--    │   SubscriptionPayment      │---------------------'
--    └────────────────────────────┘

data SubscriptionData = SubscriptionData
  with
    sender : Party -- ^ The party that pays.
    receiver : Party -- ^ The party that receives payment.
    provider : Party -- ^ The app provider.
    dso : Party
    description : Text
  deriving (Show, Eq)

subscriptionSignatories : SubscriptionData -> [Party]
subscriptionSignatories SubscriptionData{sender, receiver, provider} = [sender, receiver, provider]

data Subscription_ArchiveResult = Subscription_ArchiveResult with
  terminatedSubscription : ContractId TerminatedSubscription

data SubscriptionRequest_AcceptAndMakePaymentResult = SubscriptionRequest_AcceptAndMakePaymentResult with
  subscriptionPayment : ContractId SubscriptionInitialPayment
  senderChange : Optional (ContractId Amulet)

data SubscriptionRequest_WithdrawResult = SubscriptionRequest_WithdrawResult with
  terminatedSubscription : ContractId TerminatedSubscription

data SubscriptionRequest_RejectResult = SubscriptionRequest_RejectResult with
  terminatedSubscription : ContractId TerminatedSubscription

data SubscriptionInitialPayment_CollectResult = SubscriptionInitialPayment_CollectResult with
  subscription : ContractId Subscription
  subscriptionState : ContractId SubscriptionIdleState
  amulet : ContractId Amulet

data SubscriptionInitialPayment_RejectResult = SubscriptionInitialPayment_RejectResult with
  amuletSum : AmuletCreateSummary (ContractId Amulet)

data SubscriptionInitialPayment_ExpireResult = SubscriptionInitialPayment_ExpireResult with
  amuletSum : AmuletCreateSummary (ContractId Amulet)

data SubscriptionIdleState_ExpireSubscriptionResult = SubscriptionIdleState_ExpireSubscriptionResult with
  terminatedSubscription : ContractId TerminatedSubscription

data SubscriptionIdleState_CancelSubscriptionResult = SubscriptionIdleState_CancelSubscriptionResult with
  terminatedSubscription : ContractId TerminatedSubscription

data SubscriptionIdleState_MakePaymentResult = SubscriptionIdleState_MakePaymentResult with
  subscriptionPayment : ContractId SubscriptionPayment
  senderChange : Optional (ContractId Amulet)

data SubscriptionPayment_CollectResult = SubscriptionPayment_CollectResult with
  subscriptionState : ContractId SubscriptionIdleState
  amulet : ContractId Amulet

data SubscriptionPayment_RejectResult = SubscriptionPayment_RejectResult with
  subscriptionState : ContractId SubscriptionIdleState
  amuletSum : AmuletCreateSummary (ContractId Amulet)

data SubscriptionPayment_ExpireResult = SubscriptionPayment_ExpireResult with
  subscriptionState : ContractId SubscriptionIdleState
  amuletSum : AmuletCreateSummary (ContractId Amulet)

-- | Main subscription object.

--   Usually created in `SubscriptionInitialPayment_Collect`.
--   Immutable per subscription and passed around from state to state for convenience.
--   Can be nicely expired via the `SubscriptionIdleState`.
--   Can be used as a stable reference to a subscription.

template Subscription
  with
    subscriptionData : SubscriptionData
    reference : ContractId SubscriptionRequest -- ^ Reference to the subscription request, note that the contract will no longer be active so this just acts as a tracking id.
  where
    signatory subscriptionSignatories subscriptionData

    choice Subscription_Archive : Subscription_ArchiveResult
      controller signatory this
      do terminatedSubscription <- create TerminatedSubscription with ..
         return Subscription_ArchiveResult with ..

-- | An aborted subscription. Subscriptions should usually be archived together with
-- the context contract of the app that makes the subscription, e.g., AnsEntryContext.
-- To achieve that, we don't archive subscriptions directly but instead create TerminatedSubscription contracts
-- that are then archived as part of the surrounding workflows.
template TerminatedSubscription
  with
    subscriptionData : SubscriptionData
    reference : ContractId SubscriptionRequest
  where
    signatory subscriptionSignatories subscriptionData

-- | Payment-related properties. Expected to be mutated rarely.
data SubscriptionPayData = SubscriptionPayData
  with
    paymentAmount : PaymentAmount -- ^ What amount of amulet is due on each interval.
    paymentInterval : RelTime -- ^ At which intervals payments should be made.
    paymentDuration : RelTime -- ^ The time available to the sender to initiate a payment; they can initiate the payment this much before the end of the current interval.
  deriving (Eq, Show)

-- for ensure assertions
payDataIsValid: SubscriptionPayData -> Bool
payDataIsValid payData =
  payData.paymentAmount.amount > 0.0 && payData.paymentInterval > aunit && payData.paymentDuration > aunit


-- | A request for establishing a subscription.
template SubscriptionRequest
  with
    subscriptionData : SubscriptionData
    payData : SubscriptionPayData
  where
    signatory subscriptionSignatories subscriptionData
    ensure payDataIsValid payData

    choice SubscriptionRequest_AcceptAndMakePayment : SubscriptionRequest_AcceptAndMakePaymentResult
      with
        inputs : [TransferInput]
        context : PaymentTransferContext
        walletProvider : Party
      controller subscriptionData.sender, walletProvider
      do
        now <- getTime
        (lockedAmulet, senderChange, targetAmount, round) <- lockAndMakeChange context subscriptionData payData inputs now walletProvider

        subscriptionPayment <- create SubscriptionInitialPayment with reference = self, ..

        return SubscriptionRequest_AcceptAndMakePaymentResult with ..

    choice SubscriptionRequest_Withdraw : SubscriptionRequest_WithdrawResult
      controller subscriptionData.receiver
      do terminatedSubscription <- create TerminatedSubscription with reference = self, subscriptionData
         return SubscriptionRequest_WithdrawResult with ..

    choice SubscriptionRequest_Reject : SubscriptionRequest_RejectResult
      controller subscriptionData.sender
      do terminatedSubscription <- create TerminatedSubscription with reference = self, subscriptionData
         return SubscriptionRequest_RejectResult with ..


-- | The initial payment on a subscription.
--   Implicitly, this is also the "accept" of the preceding `SubscriptionRequest`.
--   Collecting this payments creates the subscription and thereby enables all follow-up payments.
template SubscriptionInitialPayment
  with
    subscriptionData : SubscriptionData
    payData : SubscriptionPayData
    targetAmount : Decimal -- ^ Exact amount in Amulet that the receiver will get.
    lockedAmulet : ContractId LockedAmulet
    round : Round -- ^ The round in which the locked amulet was created, added as an extra field so we can avoid ingesting locked amulets.
    reference : ContractId SubscriptionRequest -- ^ Reference to the subscription request, note that the contract will no longer be active so this just acts as a tracking id.
  where
    signatory subscriptionSignatories subscriptionData
    ensure payDataIsValid payData

    choice SubscriptionInitialPayment_Collect : SubscriptionInitialPayment_CollectResult
      with
        transferContext : AppTransferContext
      controller signatory this
      do
        contextRound <- exercise transferContext.openMiningRound (OpenMiningRound_Fetch subscriptionData.provider)
        require ("Round at subscription request " <> show round.number <> " matches round at collection " <> show contextRound.round.number) (round.number == contextRound.round.number)

        now <- getTime
        subscription <- create Subscription with subscriptionData, reference
        subscriptionState <- create SubscriptionIdleState with
          nextPaymentDueAt = now `addRelTime` payData.paymentInterval
          ..

        amulet <- unlockAndTransfer transferContext subscriptionData targetAmount lockedAmulet

        pure SubscriptionInitialPayment_CollectResult with ..

    choice SubscriptionInitialPayment_Reject : SubscriptionInitialPayment_RejectResult
      with
        transferContext : AppTransferContext
      controller subscriptionData.receiver
      do
        _ <- create TerminatedSubscription with ..
        result <- exercise lockedAmulet (LockedAmulet_Unlock transferContext.openMiningRound)
        return SubscriptionInitialPayment_RejectResult with
          amuletSum = result.amuletSum

    choice SubscriptionInitialPayment_Expire : SubscriptionInitialPayment_ExpireResult
      with
        actor : Party
        transferContext : AppTransferContext
      controller actor
      do
        -- TODO(#3822): use ExpiringContractInterface, once we decouple expiry of the delivery offer, lockedAmulet, and the AcceptedAppPayment in #3152
        require ("Actor " <> show actor <> " is a signatory") (actor `elem` signatory this)
        _ <- create TerminatedSubscription with ..
        result <- exercise lockedAmulet (LockedAmulet_OwnerExpireLock transferContext.openMiningRound) -- would fail if we can't expire yet
        return SubscriptionInitialPayment_ExpireResult with
          amuletSum = result.amuletSum


-- | The base state in our subscription flow.
-- Here, we are typically waiting for the time for the next payment to arrive.
-- If that time has passed, we are waiting for someone to expire the subscription.
template SubscriptionIdleState
  with
    subscription : ContractId Subscription -- ^ The subscription this belongs to.
    subscriptionData : SubscriptionData -- ^ Copy of the subscription contract for easier access to its field.
    payData : SubscriptionPayData -- ^ Payment-related properties.
    nextPaymentDueAt : Time -- ^ After which time the next payment can and should be paid.
    reference : ContractId SubscriptionRequest
  where
    signatory subscriptionSignatories subscriptionData
    ensure payDataIsValid payData

    choice SubscriptionIdleState_MakePayment : SubscriptionIdleState_MakePaymentResult
      with
        inputs : [TransferInput]
        context : PaymentTransferContext
        walletProvider : Party
      controller subscriptionData.sender, walletProvider
      do
        requireMatchingContract subscription (Subscription with subscriptionData, reference)

        now <- getTime
        require "The next due date is close enough to make the next payment." (now `addRelTime` payData.paymentDuration >= nextPaymentDueAt)
        -- We deliberately don't check whether it's "too late" to pay. In this way, providers can implement a "grace period".

        (lockedAmulet, senderChange, targetAmount, round) <- lockAndMakeChange context subscriptionData payData inputs now walletProvider

        subscriptionPayment <- create SubscriptionPayment with
          thisPaymentDueAt = nextPaymentDueAt
          ..

        return SubscriptionIdleState_MakePaymentResult with ..

    -- Any of the signatories can expire a subscription if one or more due payments is missing.
    choice SubscriptionIdleState_ExpireSubscription : SubscriptionIdleState_ExpireSubscriptionResult
      with
        actor : Party
      controller actor
      do
        time <- getTime
        require ("Actor " <> show actor <> " is a signatory") (actor `elem` signatory this)
        requireMatchingContract subscription (Subscription with subscriptionData, reference)
        require "Last subscription payment was missed" (nextPaymentDueAt < time)
        result <- exercise subscription Subscription_Archive
        return SubscriptionIdleState_ExpireSubscriptionResult with
          terminatedSubscription = result.terminatedSubscription

    -- The sender can cancel a subscription at any time (unless there is an in-flight payment).
    choice SubscriptionIdleState_CancelSubscription : SubscriptionIdleState_CancelSubscriptionResult
      controller subscriptionData.sender
      do
        requireMatchingContract subscription (Subscription with subscriptionData, reference)
        result <- exercise subscription Subscription_Archive
        return SubscriptionIdleState_CancelSubscriptionResult with
          terminatedSubscription = result.terminatedSubscription


-- | An in-flight (yet to be collected) payment on an existing subscription.
--   Doubles as a "payment in progress" state.
template SubscriptionPayment
  with
    subscription : ContractId Subscription -- ^ The subscription this belongs to.
    subscriptionData : SubscriptionData -- ^ Copy of the base subscription properties; for convenience.
    payData : SubscriptionPayData -- ^ Payment-related properties.
    thisPaymentDueAt : Time -- ^ After which time the next payment can and should be paid.
    targetAmount : Decimal
    lockedAmulet : ContractId LockedAmulet
    round : Round -- ^ The round in which the locked amulet was created, added as an extra field so we can avoid ingesting locked amulets.
    reference : ContractId SubscriptionRequest
  where
    signatory subscriptionSignatories subscriptionData
    ensure payDataIsValid payData

    choice SubscriptionPayment_Collect : SubscriptionPayment_CollectResult
      with
        transferContext : AppTransferContext
      controller signatory this
      do
        contextRound <- exercise transferContext.openMiningRound (OpenMiningRound_Fetch subscriptionData.provider)
        require ("Round at subscription payment " <> show round.number <> " matches round at collection " <> show contextRound.round.number) (round.number == contextRound.round.number)
        -- TODO(#9465): look into why we even need the separate subscription contract given that we duplicate all its data
        requireMatchingContract subscription (Subscription with subscriptionData, reference)
        subscriptionState <- create SubscriptionIdleState with
          nextPaymentDueAt = thisPaymentDueAt `addRelTime` payData.paymentInterval
          ..
        amulet <- unlockAndTransfer transferContext subscriptionData targetAmount lockedAmulet
        pure SubscriptionPayment_CollectResult with ..

    choice SubscriptionPayment_Reject : SubscriptionPayment_RejectResult
      with
        transferContext : AppTransferContext
      controller subscriptionData.receiver
      do
        requireMatchingContract subscription (Subscription with subscriptionData, reference)
        subscriptionState <- create SubscriptionIdleState with
          nextPaymentDueAt = thisPaymentDueAt
          ..
        result <- exercise lockedAmulet (LockedAmulet_Unlock transferContext.openMiningRound)
        pure SubscriptionPayment_RejectResult with
          subscriptionState
          amuletSum = result.amuletSum

    choice SubscriptionPayment_Expire : SubscriptionPayment_ExpireResult
      with
        actor : Party
        transferContext : AppTransferContext
      controller actor
      do
        -- TODO(#3822): use ExpiringContractInterface, once we decouple expiry of the delivery offer, lockedAmulet, and the AcceptedAppPayment in #3152
        require ("Actor " <> show actor <> " is a signatory") (actor `elem` signatory this)
        requireMatchingContract subscription (Subscription with subscriptionData, reference)
        subscriptionState <- create SubscriptionIdleState with
          nextPaymentDueAt = thisPaymentDueAt
          ..
        result <- exercise lockedAmulet (LockedAmulet_OwnerExpireLock transferContext.openMiningRound) -- would fail if we can't expire yet
        pure SubscriptionPayment_ExpireResult with
          subscriptionState
          amuletSum = result.amuletSum


lockAndMakeChange
  : PaymentTransferContext -> SubscriptionData -> SubscriptionPayData -> [TransferInput] -> Time -> Party
  -> Update (ContractId LockedAmulet, Optional (ContractId Amulet), Decimal, Round)
lockAndMakeChange context subscriptionData payData inputs now walletProvider = do
  let SubscriptionData { sender; receiver; provider; dso } = subscriptionData
  let SubscriptionPayData { paymentAmount; .. } = payData


  contextRound <- exercise @OpenMiningRound context.context.openMiningRound (OpenMiningRound_Fetch sender)

  targetAmount <- paymentAmountToAmulet dso contextRound paymentAmount

  outputFees <- exerciseComputeFees context sender [mkTransferOutput receiver targetAmount]
  let lockAmount = targetAmount + sum outputFees
  -- We know that the contextRound (=latest Round) won't be archived before
  -- its targetClosesAt or for at least 1 tick from the time we submit against the ledger.
  let expiresAt = max (addRelTime now contextRound.tickDuration) contextRound.targetClosesAt


  let transfer = Transfer with
       sender
       -- this step is orchestrated by the sender's wallet, so the sender's wallet provider gets the rewards
       provider = walletProvider
       inputs
       outputs =
         [ TransferOutput with
             receiver = sender
             amount = lockAmount
             lock = Some TimeLock with
               holders = dedupSort [provider, receiver]
               expiresAt = expiresAt
             receiverFeeRatio = 0.0
         ]

  result <- exercisePaymentTransfer context transfer
  let [TransferResultLockedAmulet lockedAmulet] = result.createdAmulets

  pure(lockedAmulet, result.senderChangeAmulet, targetAmount, result.round)


unlockAndTransfer: AppTransferContext -> SubscriptionData -> Decimal -> ContractId LockedAmulet -> Update (ContractId Amulet)
unlockAndTransfer transferContext subscriptionData targetAmount lockedAmulet = do
  let SubscriptionData { sender; receiver; provider } = subscriptionData

  -- unlock amulet and transfer the remainder to the receiver
  result <- exercise lockedAmulet (LockedAmulet_Unlock transferContext.openMiningRound)
  let transfer = Transfer with
        sender
        provider
        inputs = [InputAmulet result.amuletSum.amulet]
        outputs = [mkTransferOutput receiver targetAmount]
  result <- exerciseAppTransfer transferContext transfer
  require "Precomputed fees were exact" (result.summary.senderChangeFee == 0.0)
  let [TransferResultAmulet amuletCid] = result.createdAmulets

  pure amuletCid

mkTransferOutput : Party -> Decimal -> TransferOutput
mkTransferOutput receiver amount =
  TransferOutput with
    receiver
    amount
    lock = None
    receiverFeeRatio = 0.0
