scanAddress: "TRUSTED_SCAN_URL"
# TRUSTED_SINGLE_SCAN_START
# If you want to configure validator to use a single trusted scan, set ``nonSvValidatorTrustSingleScan`` to true.
# It will only connect to the scan specified in ``scanAddress``. This does mean that you depend on that single SV and if it is broken or malicious you will be unable to use the network so usually you want to default to not enabling this.
# nonSvValidatorTrustSingleScan: true
# TRUSTED_SINGLE_SCAN_END

# TRUSTED_SINGLE_SEQUENCER_START
# If you want to configure validator to connect to a single trusted sequencer, set ``useSequencerConnectionsFromScan`` to false.
# and replace ``TRUSTED_SYNCHRONIZER_SEQUENCER_URL`` with the publicly accessible URL of the trusted sequencer.
# This does mean that you depend on that single SV and if it is broken or malicious you will be unable to use the network so usually you want to default to not enabling this.
# decentralizedSynchronizerUrl: "TRUSTED_SYNCHRONIZER_SEQUENCER_URL"
# useSequencerConnectionsFromScan: false
# TRUSTED_SINGLE_SEQUENCER_END

# Replace OPERATOR_WALLET_USER_ID with the user id in your IAM that you want to use to log into
# the wallet as the SV party. Note that this should be the full user id, e.g., ``auth0|43b68e1e4978b000cefba352``
# not only the suffix ``43b68e1e4978b000cefba352``:
# You can specify multiple user ids if you want multiple users to be able to log into your wallet.
validatorWalletUsers:
  - "OPERATOR_WALLET_USER_ID"
auth:
  # replace OIDC_AUTHORITY_VALIDATOR_AUDIENCE with the audience of your choice
  audience: "OIDC_AUTHORITY_VALIDATOR_AUDIENCE"

  # replace OIDC_AUTHORITY_URL with your provider's OIDC URL
  jwksUrl: "https://OIDC_AUTHORITY_URL/.well-known/jwks.json"

# ENABLEWALLET_START
# This will disable the wallet HTTP server and wallet automations when set to false
enableWallet: true
# ENABLEWALLET_END

# SWEEP_START
# If you want funds sweeped out of parties in this validator, uncomment and fill in the following:
#walletSweep:
#  "<senderPartyId>":
#    maxBalanceUSD: <maxBalanceUSD>
#    minBalanceUSD: <minBalanceUSD>
#    receiver: "<receiverPartyId>"
#    useTransferPreapproval: false # sweep by transferring directly through the transfer preapproval of the receiver,
#                                    if set to false sweeping creates transfer offers that need to be accepted on the receiver side.
# SWEEP_END

# AUTO_ACCEPT_START
# To configure the validator to auto-accept transfer offers from specific parties, uncomment and fill in the following:
#autoAcceptTransfers:
#  "<receiverPartyId>":
#    fromParties:
#      - "<senderPartyId>"
# AUTO_ACCEPT_END

# Contact point for your validator node that can be used by other node operators
# to reach you if there are issues with your node.
# This can be a slack username or an email address.
# If you do not wish to share this, set it to an empty string.
contactPoint: "YOUR_CONTACT_POINT"

# PARTICIPANT_PRUNING_SCHEDULE_START
# To configure participant pruning uncomment the following section.
# Refer to the documentation for more details.
# participantPruningSchedule:
#   cron: 0 /10 * * * ? # Run every 10min
#   maxDuration: 5m # Run for a max of 5min per iteration
#   retention: 48h # Retain history that is newer than 48h.
# PARTICIPANT_PRUNING_SCHEDULE_END
