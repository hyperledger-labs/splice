include required("include/canton-basic.conf")
include required("include/sequencers.conf")
include required("include/mediators.conf")
include required("include/participants.conf")

_sv1Participant_client {
  admin-api.port = 5102
  ledger-api.port = 5101
}

_sv2Participant_client {
  admin-api.port = 5202
  ledger-api.port = 5201
}

_sv3Participant_client {
  admin-api.port = 5302
  ledger-api.port = 5301
}

_sv4Participant_client {
  admin-api.port = 5402
  ledger-api.port = 5401
}

_aliceParticipant_client {
  admin-api.port = 5502
  ledger-api.port = 5501
  http-ledger-api {
    server.port = 6201
    allow-insecure-tokens = true
  }
}

_bobParticipant_client {
  admin-api.port = 5602
  ledger-api.port = 5601
  http-ledger-api {
    server.port = 6301
    allow-insecure-tokens = true
  }
}

_splitwellParticipant_client {
  admin-api.port = 5702
  ledger-api.port = 5701
  http-ledger-api {
    server.port = 6401
    allow-insecure-tokens = true
  }
}

_sv1Sequencer_client {
  public-api.address = 0.0.0.0
  public-api.port = 5108
  admin-api.port = 5109
}

_sv2Sequencer_client {
  public-api.port = 5208
  admin-api.port = 5209
}

_sv3Sequencer_client {
  public-api.port = 5308
  admin-api.port = 5309
}

_sv4Sequencer_client {
  public-api.port = 5408
  admin-api.port = 5409
}

# 5907, 5908, 5909 are reserved for globalUpgrade

_splitwellSequencer_client {
  public-api.port = 5708
  admin-api.port = 5709
}

_splitwellUpgradeSequencer_client {
  public-api.port = 5508
  admin-api.port = 5509
}

_sv1Mediator_client {
  admin-api.port = 5107
}

_sv2Mediator_client {
  admin-api.port = 5207
}

_sv3Mediator_client {
  admin-api.port = 5307
}

_sv4Mediator_client {
  admin-api.port = 5407
}

_splitwellMediator_client {
  admin-api.port = 5707
}

_splitwellUpgradeMediator_client {
  admin-api.port = 5507
}

_autoInit_enabled {
  init.auto-init = true
  init.identity.node-identifier.type = "explicit"
}

canton {
  parameters {
    non-standard-config = yes
  }
  participants {
    sv1Participant = ${_participant_template} ${_sv1Participant_client} ${_autoInit_enabled}
    sv1Participant.storage.config.properties.databaseName = "participant_sv1"
    # Note: normally, canton nodes are initialized by the application controlling the node.
    # In the shared canton instance, we make an exception and initialize the canton nodes up front,
    # because we need to allocate test users in the bootstrap script.
    # For this to work, the nodes must initialize with the same identity that would have been assigned to them
    # by the controlling application.
    sv1Participant.init.identity.node-identifier.name = "sv1"
    sv2Participant = ${_participant_template} ${_sv2Participant_client} ${_autoInit_enabled}
    sv2Participant.storage.config.properties.databaseName = "participant_sv2"
    sv2Participant.init.identity.node-identifier.name = "sv2"
    sv3Participant = ${_participant_template} ${_sv3Participant_client} ${_autoInit_enabled}
    sv3Participant.storage.config.properties.databaseName = "participant_sv3"
    sv3Participant.init.identity.node-identifier.name = "sv3"
    sv4Participant = ${_participant_template} ${_sv4Participant_client} ${_autoInit_enabled}
    sv4Participant.storage.config.properties.databaseName = "participant_sv4"
    sv4Participant.init.identity.node-identifier.name = "sv4"
    aliceParticipant = ${_participant_template} ${_aliceParticipant_client} ${_autoInit_enabled}
    aliceParticipant.storage.config.properties.databaseName = "participant_alice"
    aliceParticipant.init.identity.node-identifier.name = "aliceValidator"
    bobParticipant = ${_participant_template} ${_bobParticipant_client} ${_autoInit_enabled}
    bobParticipant.storage.config.properties.databaseName = "participant_bob"
    bobParticipant.init.identity.node-identifier.name = "bobValidator"
    splitwellParticipant = ${_participant_template} ${_splitwellParticipant_client} ${_autoInit_enabled}
    splitwellParticipant.storage.config.properties.databaseName = "participant_splitwell"
    splitwellParticipant.init.identity.node-identifier.name = "splitwellValidator"
  }
  sequencers {
    globalSequencerSv1 = ${_sequencer_reference_template} ${_sv1Sequencer_client} ${_autoInit_enabled}
    globalSequencerSv1.storage.config.properties.databaseName = "sequencer_sv1"
    globalSequencerSv1.init.identity.node-identifier.name = "sv1"
    globalSequencerSv2 = ${_sequencer_reference_template} ${_sv2Sequencer_client} ${_autoInit_enabled}
    globalSequencerSv2.storage.config.properties.databaseName = "sequencer_sv2"
    globalSequencerSv2.init.identity.node-identifier.name = "sv2"
    globalSequencerSv3 = ${_sequencer_reference_template} ${_sv3Sequencer_client} ${_autoInit_enabled}
    globalSequencerSv3.storage.config.properties.databaseName = "sequencer_sv3"
    globalSequencerSv3.init.identity.node-identifier.name = "sv3"
    globalSequencerSv4 = ${_sequencer_reference_template} ${_sv4Sequencer_client} ${_autoInit_enabled}
    globalSequencerSv4.storage.config.properties.databaseName = "sequencer_sv4"
    globalSequencerSv4.init.identity.node-identifier.name = "sv4"
    splitwellSequencer = ${_sequencer_reference_template} ${_splitwellSequencer_client} ${_autoInit_enabled}
    splitwellSequencer.storage.config.properties.databaseName = "sequencer_splitwell"
    splitwellSequencer.sequencer.config.storage.config.properties.databaseName = "sequencer_driver_splitwell"
    splitwellSequencer.init.identity.node-identifier.name = "splitwellValidator"
    splitwellUpgradeSequencer = ${_sequencer_reference_template} ${_splitwellUpgradeSequencer_client} ${_autoInit_enabled}
    splitwellUpgradeSequencer.storage.config.properties.databaseName = "sequencer_splitwell_upgrade"
    splitwellUpgradeSequencer.sequencer.config.storage.config.properties.databaseName = "sequencer_driver_splitwell_upgrade"
    splitwellUpgradeSequencer.init.identity.node-identifier.name = "splitwellValidator"
  }
  mediators {
    globalMediatorSv1 = ${_mediator_template} ${_sv1Mediator_client} ${_autoInit_enabled}
    globalMediatorSv1.storage.config.properties.databaseName = "mediator_sv1"
    globalMediatorSv1.init.identity.node-identifier.name = "sv1"
    globalMediatorSv2 = ${_mediator_template} ${_sv2Mediator_client} ${_autoInit_enabled}
    globalMediatorSv2.storage.config.properties.databaseName = "mediator_sv2"
    globalMediatorSv2.init.identity.node-identifier.name = "sv2"
    globalMediatorSv3 = ${_mediator_template} ${_sv3Mediator_client} ${_autoInit_enabled}
    globalMediatorSv3.storage.config.properties.databaseName = "mediator_sv3"
    globalMediatorSv3.init.identity.node-identifier.name = "sv3"
    globalMediatorSv4 = ${_mediator_template} ${_sv4Mediator_client} ${_autoInit_enabled}
    globalMediatorSv4.storage.config.properties.databaseName = "mediator_sv4"
    globalMediatorSv4.init.identity.node-identifier.name = "sv4"
    splitwellMediator = ${_mediator_template} ${_splitwellMediator_client} ${_autoInit_enabled}
    splitwellMediator.storage.config.properties.databaseName = "mediator_splitwell"
    splitwellMediator.init.identity.node-identifier.name = "splitwellValidator"
    splitwellUpgradeMediator = ${_mediator_template} ${_splitwellUpgradeMediator_client} ${_autoInit_enabled}
    splitwellUpgradeMediator.storage.config.properties.databaseName = "mediator_splitwell_upgrade"
    splitwellUpgradeMediator.init.identity.node-identifier.name = "splitwellValidator"
  }
}

canton.monitoring {
  metrics {
    jvm-metrics.enabled = true
    reporters = [{
      type = prometheus
      address = "0.0.0.0"
      port = 5000
    }]
  }
}
